//go:cgo_ldflag "-fsanitize=thread"
//go:cgo_ldflag "-fPIC"
//go:cgo_ldflag "-static-libtsan"
//go:cgo_ldflag "-g"
//go:cgo_ldflag "-fsanitize=thread"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_int int32

type _Ctype_struct_tracebackArg struct {
	Context		_Ctype_uintptr_t
	SigContext	_Ctype_uintptr_t
	Buf		*_Ctype_uintptr_t
	Max		_Ctype_uintptr_t
}

type _Ctype_uintptr_t = _Ctype_ulong

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})
//go:linkname __cgo_tsanTraceback tsanTraceback
//go:cgo_import_static tsanTraceback
var __cgo_tsanTraceback byte
var _Cfpvar_fp_tsanTraceback unsafe.Pointer = (unsafe.Pointer)(unsafe.Pointer(&__cgo_tsanTraceback))

//go:cgo_import_static _cgo_0230c461ab42_Cfunc_runThreads
//go:linkname __cgofn__cgo_0230c461ab42_Cfunc_runThreads _cgo_0230c461ab42_Cfunc_runThreads
var __cgofn__cgo_0230c461ab42_Cfunc_runThreads byte
var _cgo_0230c461ab42_Cfunc_runThreads = unsafe.Pointer(&__cgofn__cgo_0230c461ab42_Cfunc_runThreads)

//go:cgo_unsafe_args
func _Cfunc_runThreads(p0 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0230c461ab42_Cfunc_runThreads, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
