# command-line-arguments
command-line-arguments.andn64<1> STEXT nosplit size=6 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	TEXT	command-line-arguments.andn64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	FUNCDATA	$5, command-line-arguments.andn64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	FUNCDATA	$6, command-line-arguments.andn64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:9)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:11)	ANDNQ	AX, BX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:11)	RET
	0x0000 c4 e2 e0 f2 c0 c3                                ......
command-line-arguments.andn32<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	TEXT	command-line-arguments.andn32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	FUNCDATA	$5, command-line-arguments.andn32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	FUNCDATA	$6, command-line-arguments.andn32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:14)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:16)	ANDNL	AX, BX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:16)	RET
	0x0000 c4 e2 60 f2 c0 c3                                ..`...
command-line-arguments.blsi64<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	TEXT	command-line-arguments.blsi64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	FUNCDATA	$5, command-line-arguments.blsi64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	FUNCDATA	$6, command-line-arguments.blsi64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:19)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:21)	BLSIQ	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:21)	RET
	0x0000 c4 e2 f8 f3 d8 c3                                ......
command-line-arguments.blsi32<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	TEXT	command-line-arguments.blsi32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	FUNCDATA	$5, command-line-arguments.blsi32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	FUNCDATA	$6, command-line-arguments.blsi32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:24)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:26)	BLSIL	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:26)	RET
	0x0000 c4 e2 78 f3 d8 c3                                ..x...
command-line-arguments.blsmsk64<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	TEXT	command-line-arguments.blsmsk64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	FUNCDATA	$5, command-line-arguments.blsmsk64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	FUNCDATA	$6, command-line-arguments.blsmsk64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:29)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:31)	BLSMSKQ	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:31)	RET
	0x0000 c4 e2 f8 f3 d0 c3                                ......
command-line-arguments.blsmsk32<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	TEXT	command-line-arguments.blsmsk32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	FUNCDATA	$5, command-line-arguments.blsmsk32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	FUNCDATA	$6, command-line-arguments.blsmsk32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:34)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:36)	BLSMSKL	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:36)	RET
	0x0000 c4 e2 78 f3 d0 c3                                ..x...
command-line-arguments.blsr64<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	TEXT	command-line-arguments.blsr64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	FUNCDATA	$5, command-line-arguments.blsr64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	FUNCDATA	$6, command-line-arguments.blsr64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:39)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:41)	BLSRQ	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:41)	RET
	0x0000 c4 e2 f8 f3 c8 c3                                ......
command-line-arguments.blsr32<1> STEXT nosplit size=6 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	TEXT	command-line-arguments.blsr32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	FUNCDATA	$5, command-line-arguments.blsr32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	FUNCDATA	$6, command-line-arguments.blsr32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:44)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:46)	BLSRL	AX, AX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:46)	RET
	0x0000 c4 e2 78 f3 c8 c3                                ..x...
command-line-arguments.isPowerOfTwo64<1> STEXT nosplit size=10 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	TEXT	command-line-arguments.isPowerOfTwo64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	FUNCDATA	$5, command-line-arguments.isPowerOfTwo64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	FUNCDATA	$6, command-line-arguments.isPowerOfTwo64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:49)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:51)	BLSRQ	AX, CX
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:51)	SETEQ	AL
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:51)	RET
	0x0000 90 c4 e2 f0 f3 c8 0f 94 c0 c3                    ..........
command-line-arguments.isPowerOfTwo32<1> STEXT nosplit size=10 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	TEXT	command-line-arguments.isPowerOfTwo32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	FUNCDATA	$5, command-line-arguments.isPowerOfTwo32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	FUNCDATA	$6, command-line-arguments.isPowerOfTwo32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:54)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:56)	BLSRL	AX, CX
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:56)	SETEQ	AL
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:56)	RET
	0x0000 90 c4 e2 70 f3 c8 0f 94 c0 c3                    ...p......
command-line-arguments.isPowerOfTwoSelect64<1> STEXT nosplit size=18 args=0x18 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	TEXT	command-line-arguments.isPowerOfTwoSelect64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	FUNCDATA	$5, command-line-arguments.isPowerOfTwoSelect64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	FUNCDATA	$6, command-line-arguments.isPowerOfTwoSelect64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:59)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:62)	XCHGL	AX, AX
	0x0002 00002 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:62)	BLSRQ	AX, DX
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:68)	CMOVQEQ	BX, CX
	0x000b 00011 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:68)	SHLQ	$1, CX
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:68)	MOVQ	CX, AX
	0x0011 00017 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:62)	RET
	0x0000 90 90 c4 e2 e8 f3 c8 48 0f 44 cb 48 d1 e1 48 89  .......H.D.H..H.
	0x0010 c8 c3                                            ..
command-line-arguments.isPowerOfTwoSelect32<1> STEXT nosplit size=15 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	TEXT	command-line-arguments.isPowerOfTwoSelect32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	FUNCDATA	$5, command-line-arguments.isPowerOfTwoSelect32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	FUNCDATA	$6, command-line-arguments.isPowerOfTwoSelect32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:71)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:74)	XCHGL	AX, AX
	0x0002 00002 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:74)	BLSRL	AX, DX
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:80)	CMOVLEQ	BX, CX
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:80)	SHLL	$1, CX
	0x000c 00012 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:80)	MOVL	CX, AX
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:74)	RET
	0x0000 90 90 c4 e2 68 f3 c8 0f 44 cb d1 e1 89 c8 c3     ....h...D......
command-line-arguments.isPowerOfTwoBranch64<1> STEXT size=100 args=0x18 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	TEXT	command-line-arguments.isPowerOfTwoBranch64(SB), ABIInternal, $24-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	CMPQ	SP, 16(R14)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$0, $-2
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	JLS	63
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$0, $-1
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PUSHQ	BP
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	SP, BP
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	SUBQ	$16, SP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	FUNCDATA	$0, gclocals·jGrZsD7lYjdYP8VEa+BSQQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	FUNCDATA	$5, command-line-arguments.isPowerOfTwoBranch64.arginfo1(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	FUNCDATA	$6, command-line-arguments.isPowerOfTwoBranch64.argliveinfo(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$3, $1
	0x000e 00014 (<unknown line number>)	NOP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:85)	XCHGL	AX, AX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:85)	BLSRQ	AX, SI
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:85)	JNE	37
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	MOVQ	(BX), CX
	0x0019 00025 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	MOVL	$1, AX
	0x001e 00030 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	MOVQ	BX, DX
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	PCDATA	$1, $1
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	CALL	CX
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:86)	JMP	57
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:88)	MOVQ	(CX), SI
	0x0028 00040 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:88)	LEAQ	go:string."false"(SB), AX
	0x002f 00047 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:88)	MOVL	$5, BX
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:88)	MOVQ	CX, DX
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:88)	CALL	SI
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:90)	ADDQ	$16, SP
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:90)	POPQ	BP
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:90)	RET
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:90)	NOP
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$1, $-1
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$0, $-2
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	AX, 8(SP)
	0x0044 00068 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	BX, 16(SP)
	0x0049 00073 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	CX, 24(SP)
	0x004e 00078 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	CALL	runtime.morestack_noctxt(SB)
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	PCDATA	$0, $-1
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	8(SP), AX
	0x0058 00088 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	16(SP), BX
	0x005d 00093 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	MOVQ	24(SP), CX
	0x0062 00098 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:83)	JMP	0
	0x0000 49 3b 66 10 76 39 55 48 89 e5 48 83 ec 10 90 c4  I;f.v9UH..H.....
	0x0010 e2 c8 f3 c8 75 0f 48 8b 0b b8 01 00 00 00 48 89  ....u.H.......H.
	0x0020 da ff d1 eb 14 48 8b 31 48 8d 05 00 00 00 00 bb  .....H.1H.......
	0x0030 05 00 00 00 48 89 ca ff d6 48 83 c4 10 5d c3 48  ....H....H...].H
	0x0040 89 44 24 08 48 89 5c 24 10 48 89 4c 24 18 e8 00  .D$.H.\$.H.L$...
	0x0050 00 00 00 48 8b 44 24 08 48 8b 5c 24 10 48 8b 4c  ...H.D$.H.\$.H.L
	0x0060 24 18 eb 9c                                      $...
	rel 33+0 t=R_CALLIND +0
	rel 43+4 t=R_PCREL go:string."false"<0>+0
	rel 55+0 t=R_CALLIND +0
	rel 79+4 t=R_CALL runtime.morestack_noctxt<0>+0
command-line-arguments.isPowerOfTwoBranch32<1> STEXT size=98 args=0x18 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	TEXT	command-line-arguments.isPowerOfTwoBranch32(SB), ABIInternal, $24-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	CMPQ	SP, 16(R14)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$0, $-2
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	JLS	63
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$0, $-1
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PUSHQ	BP
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVQ	SP, BP
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	SUBQ	$16, SP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	FUNCDATA	$0, gclocals·jGrZsD7lYjdYP8VEa+BSQQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	FUNCDATA	$5, command-line-arguments.isPowerOfTwoBranch32.arginfo1(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	FUNCDATA	$6, command-line-arguments.isPowerOfTwoBranch32.argliveinfo(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$3, $1
	0x000e 00014 (<unknown line number>)	NOP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:94)	XCHGL	AX, AX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:94)	BLSRL	AX, SI
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:94)	JNE	37
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	MOVQ	(BX), CX
	0x0019 00025 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	MOVL	$1, AX
	0x001e 00030 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	MOVQ	BX, DX
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	PCDATA	$1, $1
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	CALL	CX
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:95)	JMP	57
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:97)	MOVQ	(CX), SI
	0x0028 00040 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:97)	LEAQ	go:string."false"(SB), AX
	0x002f 00047 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:97)	MOVL	$5, BX
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:97)	MOVQ	CX, DX
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:97)	CALL	SI
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:99)	ADDQ	$16, SP
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:99)	POPQ	BP
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:99)	RET
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:99)	NOP
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$1, $-1
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$0, $-2
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVL	AX, 8(SP)
	0x0043 00067 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVQ	BX, 16(SP)
	0x0048 00072 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVQ	CX, 24(SP)
	0x004d 00077 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	CALL	runtime.morestack_noctxt(SB)
	0x0052 00082 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	PCDATA	$0, $-1
	0x0052 00082 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVL	8(SP), AX
	0x0056 00086 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVQ	16(SP), BX
	0x005b 00091 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	MOVQ	24(SP), CX
	0x0060 00096 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:92)	JMP	0
	0x0000 49 3b 66 10 76 39 55 48 89 e5 48 83 ec 10 90 c4  I;f.v9UH..H.....
	0x0010 e2 48 f3 c8 75 0f 48 8b 0b b8 01 00 00 00 48 89  .H..u.H.......H.
	0x0020 da ff d1 eb 14 48 8b 31 48 8d 05 00 00 00 00 bb  .....H.1H.......
	0x0030 05 00 00 00 48 89 ca ff d6 48 83 c4 10 5d c3 89  ....H....H...]..
	0x0040 44 24 08 48 89 5c 24 10 48 89 4c 24 18 e8 00 00  D$.H.\$.H.L$....
	0x0050 00 00 8b 44 24 08 48 8b 5c 24 10 48 8b 4c 24 18  ...D$.H.\$.H.L$.
	0x0060 eb 9e                                            ..
	rel 33+0 t=R_CALLIND +0
	rel 43+4 t=R_PCREL go:string."false"<0>+0
	rel 55+0 t=R_CALLIND +0
	rel 78+4 t=R_CALL runtime.morestack_noctxt<0>+0
command-line-arguments.isNotPowerOfTwo64<1> STEXT nosplit size=10 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	TEXT	command-line-arguments.isNotPowerOfTwo64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwo64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwo64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:101)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:103)	BLSRQ	AX, CX
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:103)	SETNE	AL
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:103)	RET
	0x0000 90 c4 e2 f0 f3 c8 0f 95 c0 c3                    ..........
command-line-arguments.isNotPowerOfTwo32<1> STEXT nosplit size=10 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	TEXT	command-line-arguments.isNotPowerOfTwo32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwo32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwo32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:106)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:108)	BLSRL	AX, CX
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:108)	SETNE	AL
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:108)	RET
	0x0000 90 c4 e2 70 f3 c8 0f 95 c0 c3                    ...p......
command-line-arguments.isNotPowerOfTwoSelect64<1> STEXT nosplit size=18 args=0x18 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	TEXT	command-line-arguments.isNotPowerOfTwoSelect64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwoSelect64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwoSelect64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:111)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:114)	XCHGL	AX, AX
	0x0002 00002 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:114)	BLSRQ	AX, DX
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:120)	CMOVQNE	BX, CX
	0x000b 00011 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:120)	SHLQ	$1, CX
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:120)	MOVQ	CX, AX
	0x0011 00017 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:114)	RET
	0x0000 90 90 c4 e2 e8 f3 c8 48 0f 45 cb 48 d1 e1 48 89  .......H.E.H..H.
	0x0010 c8 c3                                            ..
command-line-arguments.isNotPowerOfTwoSelect32<1> STEXT nosplit size=15 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	TEXT	command-line-arguments.isNotPowerOfTwoSelect32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwoSelect32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwoSelect32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	PCDATA	$3, $1
	0x0000 00000 (<unknown line number>)	NOP
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:123)	XCHGL	AX, AX
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:126)	XCHGL	AX, AX
	0x0002 00002 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:126)	BLSRL	AX, DX
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:132)	CMOVLNE	BX, CX
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:132)	SHLL	$1, CX
	0x000c 00012 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:132)	MOVL	CX, AX
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:126)	RET
	0x0000 90 90 c4 e2 68 f3 c8 0f 45 cb d1 e1 89 c8 c3     ....h...E......
command-line-arguments.isNotPowerOfTwoBranch64<1> STEXT size=100 args=0x18 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	TEXT	command-line-arguments.isNotPowerOfTwoBranch64(SB), ABIInternal, $24-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	CMPQ	SP, 16(R14)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$0, $-2
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	JLS	63
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$0, $-1
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PUSHQ	BP
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	SP, BP
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	SUBQ	$16, SP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	FUNCDATA	$0, gclocals·jGrZsD7lYjdYP8VEa+BSQQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwoBranch64.arginfo1(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwoBranch64.argliveinfo(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$3, $1
	0x000e 00014 (<unknown line number>)	NOP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:137)	XCHGL	AX, AX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:137)	BLSRQ	AX, SI
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:137)	JEQ	37
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	MOVQ	(BX), CX
	0x0019 00025 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	MOVL	$1, AX
	0x001e 00030 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	MOVQ	BX, DX
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	PCDATA	$1, $1
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	CALL	CX
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:138)	JMP	57
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:140)	MOVQ	(CX), SI
	0x0028 00040 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:140)	LEAQ	go:string."false"(SB), AX
	0x002f 00047 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:140)	MOVL	$5, BX
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:140)	MOVQ	CX, DX
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:140)	CALL	SI
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:142)	ADDQ	$16, SP
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:142)	POPQ	BP
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:142)	RET
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:142)	NOP
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$1, $-1
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$0, $-2
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	AX, 8(SP)
	0x0044 00068 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	BX, 16(SP)
	0x0049 00073 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	CX, 24(SP)
	0x004e 00078 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	CALL	runtime.morestack_noctxt(SB)
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	PCDATA	$0, $-1
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	8(SP), AX
	0x0058 00088 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	16(SP), BX
	0x005d 00093 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	MOVQ	24(SP), CX
	0x0062 00098 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:135)	JMP	0
	0x0000 49 3b 66 10 76 39 55 48 89 e5 48 83 ec 10 90 c4  I;f.v9UH..H.....
	0x0010 e2 c8 f3 c8 74 0f 48 8b 0b b8 01 00 00 00 48 89  ....t.H.......H.
	0x0020 da ff d1 eb 14 48 8b 31 48 8d 05 00 00 00 00 bb  .....H.1H.......
	0x0030 05 00 00 00 48 89 ca ff d6 48 83 c4 10 5d c3 48  ....H....H...].H
	0x0040 89 44 24 08 48 89 5c 24 10 48 89 4c 24 18 e8 00  .D$.H.\$.H.L$...
	0x0050 00 00 00 48 8b 44 24 08 48 8b 5c 24 10 48 8b 4c  ...H.D$.H.\$.H.L
	0x0060 24 18 eb 9c                                      $...
	rel 33+0 t=R_CALLIND +0
	rel 43+4 t=R_PCREL go:string."false"<0>+0
	rel 55+0 t=R_CALLIND +0
	rel 79+4 t=R_CALL runtime.morestack_noctxt<0>+0
command-line-arguments.isNotPowerOfTwoBranch32<1> STEXT size=98 args=0x18 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	TEXT	command-line-arguments.isNotPowerOfTwoBranch32(SB), ABIInternal, $24-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	CMPQ	SP, 16(R14)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$0, $-2
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	JLS	63
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$0, $-1
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PUSHQ	BP
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVQ	SP, BP
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	SUBQ	$16, SP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	FUNCDATA	$0, gclocals·jGrZsD7lYjdYP8VEa+BSQQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	FUNCDATA	$5, command-line-arguments.isNotPowerOfTwoBranch32.arginfo1(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	FUNCDATA	$6, command-line-arguments.isNotPowerOfTwoBranch32.argliveinfo(SB)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$3, $1
	0x000e 00014 (<unknown line number>)	NOP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:146)	XCHGL	AX, AX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:146)	BLSRL	AX, SI
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:146)	JEQ	37
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	MOVQ	(BX), CX
	0x0019 00025 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	MOVL	$1, AX
	0x001e 00030 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	MOVQ	BX, DX
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	PCDATA	$1, $1
	0x0021 00033 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	CALL	CX
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:147)	JMP	57
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:149)	MOVQ	(CX), SI
	0x0028 00040 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:149)	LEAQ	go:string."false"(SB), AX
	0x002f 00047 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:149)	MOVL	$5, BX
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:149)	MOVQ	CX, DX
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:149)	CALL	SI
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:151)	ADDQ	$16, SP
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:151)	POPQ	BP
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:151)	RET
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:151)	NOP
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$1, $-1
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$0, $-2
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVL	AX, 8(SP)
	0x0043 00067 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVQ	BX, 16(SP)
	0x0048 00072 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVQ	CX, 24(SP)
	0x004d 00077 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	CALL	runtime.morestack_noctxt(SB)
	0x0052 00082 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	PCDATA	$0, $-1
	0x0052 00082 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVL	8(SP), AX
	0x0056 00086 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVQ	16(SP), BX
	0x005b 00091 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	MOVQ	24(SP), CX
	0x0060 00096 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:144)	JMP	0
	0x0000 49 3b 66 10 76 39 55 48 89 e5 48 83 ec 10 90 c4  I;f.v9UH..H.....
	0x0010 e2 48 f3 c8 74 0f 48 8b 0b b8 01 00 00 00 48 89  .H..t.H.......H.
	0x0020 da ff d1 eb 14 48 8b 31 48 8d 05 00 00 00 00 bb  .....H.1H.......
	0x0030 05 00 00 00 48 89 ca ff d6 48 83 c4 10 5d c3 89  ....H....H...]..
	0x0040 44 24 08 48 89 5c 24 10 48 89 4c 24 18 e8 00 00  D$.H.\$.H.L$....
	0x0050 00 00 8b 44 24 08 48 8b 5c 24 10 48 8b 4c 24 18  ...D$.H.\$.H.L$.
	0x0060 eb 9e                                            ..
	rel 33+0 t=R_CALLIND +0
	rel 43+4 t=R_PCREL go:string."false"<0>+0
	rel 55+0 t=R_CALLIND +0
	rel 78+4 t=R_CALL runtime.morestack_noctxt<0>+0
command-line-arguments.sarx64<1> STEXT nosplit size=38 args=0x10 locals=0x8 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	TEXT	command-line-arguments.sarx64(SB), NOSPLIT|ABIInternal, $8-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	FUNCDATA	$5, command-line-arguments.sarx64.arginfo1(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	FUNCDATA	$6, command-line-arguments.sarx64.argliveinfo(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:153)	PCDATA	$3, $1
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	TESTQ	BX, BX
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	JLT	29
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	CMPQ	BX, $64
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	SBBQ	CX, CX
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	NOTQ	CX
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	ORQ	CX, BX
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	SARXQ	BX, AX, AX
	0x001b 00027 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	POPQ	BP
	0x001c 00028 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	RET
	0x001d 00029 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	PCDATA	$1, $0
	0x001d 00029 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	NOP
	0x0020 00032 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	CALL	runtime.panicshift(SB)
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:155)	XCHGL	AX, AX
	0x0000 55 48 89 e5 48 85 db 7c 14 48 83 fb 40 48 19 c9  UH..H..|.H..@H..
	0x0010 48 f7 d1 48 09 cb c4 e2 e2 f7 c0 5d c3 0f 1f 00  H..H.......]....
	0x0020 e8 00 00 00 00 90                                ......
	rel 33+4 t=R_CALL runtime.panicshift<1>+0
command-line-arguments.sarx32<1> STEXT nosplit size=30 args=0x8 locals=0x8 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	TEXT	command-line-arguments.sarx32(SB), NOSPLIT|ABIInternal, $8-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	FUNCDATA	$5, command-line-arguments.sarx32.arginfo1(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	FUNCDATA	$6, command-line-arguments.sarx32.argliveinfo(SB)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:158)	PCDATA	$3, $1
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	TESTL	BX, BX
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	JLT	24
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	CMPL	BX, $32
	0x000b 00011 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	SBBL	CX, CX
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	NOTL	CX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	ORL	CX, BX
	0x0011 00017 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	SARXL	BX, AX, AX
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	POPQ	BP
	0x0017 00023 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	RET
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	PCDATA	$1, $0
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	CALL	runtime.panicshift(SB)
	0x001d 00029 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:160)	XCHGL	AX, AX
	0x0000 55 48 89 e5 85 db 7c 10 83 fb 20 19 c9 f7 d1 09  UH....|... .....
	0x0010 cb c4 e2 62 f7 c0 5d c3 e8 00 00 00 00 90        ...b..].......
	rel 25+4 t=R_CALL runtime.panicshift<1>+0
command-line-arguments.sarx64_load<1> STEXT nosplit size=73 args=0x20 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	TEXT	command-line-arguments.sarx64_load(SB), NOSPLIT|ABIInternal, $24-32
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	SUBQ	$16, SP
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	MOVQ	AX, command-line-arguments.x+32(FP)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	FUNCDATA	$0, gclocals·wgcWObbY2HYnK2SU/U22lA==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	FUNCDATA	$5, command-line-arguments.sarx64_load.arginfo1(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	FUNCDATA	$6, command-line-arguments.sarx64_load.argliveinfo(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:163)	PCDATA	$3, $1
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	CMPQ	BX, DI
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	JLS	61
	0x0012 00018 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	LEAQ	1(DI), DX
	0x0016 00022 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	SARXQ	DI, (AX)(DI*8), SI
	0x001c 00028 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	NOP
	0x0020 00032 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	CMPQ	BX, DX
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	JLS	50
	0x0025 00037 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	SARXQ	SI, 8(AX)(DI*8), AX
	0x002c 00044 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:168)	ADDQ	$16, SP
	0x0030 00048 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:168)	POPQ	BP
	0x0031 00049 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:168)	RET
	0x0032 00050 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	MOVQ	DX, AX
	0x0035 00053 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	MOVQ	BX, CX
	0x0038 00056 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	PCDATA	$1, $1
	0x0038 00056 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:167)	CALL	runtime.panicIndex(SB)
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	MOVQ	DI, AX
	0x0040 00064 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	MOVQ	BX, CX
	0x0043 00067 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	CALL	runtime.panicIndex(SB)
	0x0048 00072 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:165)	XCHGL	AX, AX
	0x0000 55 48 89 e5 48 83 ec 10 48 89 44 24 20 48 39 fb  UH..H...H.D$ H9.
	0x0010 76 2b 48 8d 57 01 c4 e2 c2 f7 34 f8 0f 1f 40 00  v+H.W.....4...@.
	0x0020 48 39 d3 76 0d c4 e2 ca f7 44 f8 08 48 83 c4 10  H9.v.....D..H...
	0x0030 5d c3 48 89 d0 48 89 d9 e8 00 00 00 00 48 89 f8  ].H..H.......H..
	0x0040 48 89 d9 e8 00 00 00 00 90                       H........
	rel 57+4 t=R_CALL runtime.panicIndex<1>+0
	rel 68+4 t=R_CALL runtime.panicIndex<1>+0
command-line-arguments.sarx32_load<1> STEXT nosplit size=102 args=0x20 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	TEXT	command-line-arguments.sarx32_load(SB), NOSPLIT|ABIInternal, $24-32
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	SUBQ	$16, SP
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	MOVQ	AX, command-line-arguments.x+32(FP)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	FUNCDATA	$0, gclocals·wgcWObbY2HYnK2SU/U22lA==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	FUNCDATA	$5, command-line-arguments.sarx32_load.arginfo1(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	FUNCDATA	$6, command-line-arguments.sarx32_load.argliveinfo(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:171)	PCDATA	$3, $1
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	CMPQ	BX, DI
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	JLS	88
	0x0012 00018 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	MOVQ	DI, DX
	0x0015 00021 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	ANDL	$63, DI
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	LEAQ	1(DX), SI
	0x001c 00028 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	CMPQ	DI, $32
	0x0020 00032 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	SBBQ	R8, R8
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	NOTQ	R8
	0x0026 00038 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	ORQ	R8, DI
	0x0029 00041 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	SARXL	DI, (AX)(DX*4), DI
	0x002f 00047 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	CMPQ	BX, SI
	0x0032 00050 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	JLS	77
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	ANDL	$63, DI
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	CMPL	DI, $32
	0x003a 00058 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	SBBL	CX, CX
	0x003c 00060 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	NOTL	CX
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	ORL	CX, DI
	0x0040 00064 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	SARXL	DI, 4(AX)(DX*4), AX
	0x0047 00071 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:176)	ADDQ	$16, SP
	0x004b 00075 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:176)	POPQ	BP
	0x004c 00076 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:176)	RET
	0x004d 00077 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	MOVQ	SI, AX
	0x0050 00080 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	MOVQ	BX, CX
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	PCDATA	$1, $1
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:175)	CALL	runtime.panicIndex(SB)
	0x0058 00088 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	MOVQ	DI, AX
	0x005b 00091 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	MOVQ	BX, CX
	0x005e 00094 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	NOP
	0x0060 00096 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	CALL	runtime.panicIndex(SB)
	0x0065 00101 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:173)	XCHGL	AX, AX
	0x0000 55 48 89 e5 48 83 ec 10 48 89 44 24 20 48 39 fb  UH..H...H.D$ H9.
	0x0010 76 46 48 89 fa 83 e7 3f 48 8d 72 01 48 83 ff 20  vFH....?H.r.H.. 
	0x0020 4d 19 c0 49 f7 d0 4c 09 c7 c4 e2 42 f7 3c 90 48  M..I..L....B.<.H
	0x0030 39 f3 76 19 83 e7 3f 83 ff 20 19 c9 f7 d1 09 cf  9.v...?.. ......
	0x0040 c4 e2 42 f7 44 90 04 48 83 c4 10 5d c3 48 89 f0  ..B.D..H...].H..
	0x0050 48 89 d9 e8 00 00 00 00 48 89 f8 48 89 d9 66 90  H.......H..H..f.
	0x0060 e8 00 00 00 00 90                                ......
	rel 84+4 t=R_CALL runtime.panicIndex<1>+0
	rel 97+4 t=R_CALL runtime.panicIndex<1>+0
command-line-arguments.shlrx64<1> STEXT nosplit size=24 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	TEXT	command-line-arguments.shlrx64(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	FUNCDATA	$5, command-line-arguments.shlrx64.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	FUNCDATA	$6, command-line-arguments.shlrx64.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:179)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:181)	SHRXQ	BX, AX, CX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:181)	CMPQ	BX, $64
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:183)	SBBQ	AX, AX
	0x000c 00012 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:181)	ANDQ	AX, CX
	0x000f 00015 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:183)	SHLXQ	BX, CX, CX
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:183)	ANDQ	CX, AX
	0x0017 00023 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:184)	RET
	0x0000 c4 e2 e3 f7 c8 48 83 fb 40 48 19 c0 48 21 c1 c4  .....H..@H..H!..
	0x0010 e2 e1 f7 c9 48 21 c8 c3                          ....H!..
command-line-arguments.shlrx32<1> STEXT nosplit size=20 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	TEXT	command-line-arguments.shlrx32(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	FUNCDATA	$5, command-line-arguments.shlrx32.arginfo1(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	FUNCDATA	$6, command-line-arguments.shlrx32.argliveinfo(SB)
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:187)	PCDATA	$3, $1
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:189)	SHRXL	BX, AX, CX
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:189)	CMPL	BX, $32
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:191)	SBBL	AX, AX
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:189)	ANDL	AX, CX
	0x000c 00012 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:191)	SHLXL	BX, CX, CX
	0x0011 00017 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:191)	ANDL	CX, AX
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:192)	RET
	0x0000 c4 e2 63 f7 c8 83 fb 20 19 c0 21 c1 c4 e2 61 f7  ..c.... ..!...a.
	0x0010 c9 21 c8 c3                                      .!..
command-line-arguments.shlrx64_load<1> STEXT nosplit size=89 args=0x28 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	TEXT	command-line-arguments.shlrx64_load(SB), NOSPLIT|ABIInternal, $24-40
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	SUBQ	$16, SP
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	MOVQ	AX, command-line-arguments.x+32(FP)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	FUNCDATA	$0, gclocals·wgcWObbY2HYnK2SU/U22lA==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	FUNCDATA	$5, command-line-arguments.shlrx64_load.arginfo1(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	FUNCDATA	$6, command-line-arguments.shlrx64_load.argliveinfo(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:195)	PCDATA	$3, $1
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	CMPQ	BX, DI
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	JLS	77
	0x0012 00018 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	SHRXQ	DI, (AX)(DI*8), DX
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	LEAQ	1(DI), SI
	0x001c 00028 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	CMPQ	DI, $64
	0x0020 00032 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	SBBQ	R8, R8
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	ANDQ	R8, DX
	0x0026 00038 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	CMPQ	BX, SI
	0x0029 00041 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	JLS	66
	0x002b 00043 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	SHLXQ	DX, 8(AX)(DI*8), AX
	0x0032 00050 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	CMPQ	DX, $64
	0x0036 00054 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	SBBQ	CX, CX
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	ANDQ	CX, AX
	0x003c 00060 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:200)	ADDQ	$16, SP
	0x0040 00064 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:200)	POPQ	BP
	0x0041 00065 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:200)	RET
	0x0042 00066 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	MOVQ	SI, AX
	0x0045 00069 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	MOVQ	BX, CX
	0x0048 00072 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	PCDATA	$1, $1
	0x0048 00072 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:199)	CALL	runtime.panicIndex(SB)
	0x004d 00077 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	MOVQ	DI, AX
	0x0050 00080 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	MOVQ	BX, CX
	0x0053 00083 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	CALL	runtime.panicIndex(SB)
	0x0058 00088 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:197)	XCHGL	AX, AX
	0x0000 55 48 89 e5 48 83 ec 10 48 89 44 24 20 48 39 fb  UH..H...H.D$ H9.
	0x0010 76 3b c4 e2 c3 f7 14 f8 48 8d 77 01 48 83 ff 40  v;......H.w.H..@
	0x0020 4d 19 c0 4c 21 c2 48 39 f3 76 17 c4 e2 e9 f7 44  M..L!.H9.v.....D
	0x0030 f8 08 48 83 fa 40 48 19 c9 48 21 c8 48 83 c4 10  ..H..@H..H!.H...
	0x0040 5d c3 48 89 f0 48 89 d9 e8 00 00 00 00 48 89 f8  ].H..H.......H..
	0x0050 48 89 d9 e8 00 00 00 00 90                       H........
	rel 73+4 t=R_CALL runtime.panicIndex<1>+0
	rel 84+4 t=R_CALL runtime.panicIndex<1>+0
command-line-arguments.shlrx32_load<1> STEXT nosplit size=86 args=0x28 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	TEXT	command-line-arguments.shlrx32_load(SB), NOSPLIT|ABIInternal, $24-40
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	PUSHQ	BP
	0x0001 00001 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	MOVQ	SP, BP
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	SUBQ	$16, SP
	0x0008 00008 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	MOVQ	AX, command-line-arguments.x+32(FP)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	FUNCDATA	$0, gclocals·wgcWObbY2HYnK2SU/U22lA==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	FUNCDATA	$5, command-line-arguments.shlrx32_load.arginfo1(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	FUNCDATA	$6, command-line-arguments.shlrx32_load.argliveinfo(SB)
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:203)	PCDATA	$3, $1
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	CMPQ	BX, DI
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	JLS	74
	0x0012 00018 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	SHRXL	DI, (AX)(DI*4), DX
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	LEAQ	1(DI), SI
	0x001c 00028 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	CMPQ	DI, $32
	0x0020 00032 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	SBBL	R8, R8
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	ANDL	R8, DX
	0x0026 00038 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	CMPQ	BX, SI
	0x0029 00041 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	JLS	63
	0x002b 00043 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	SHLXL	DX, 4(AX)(DI*4), AX
	0x0032 00050 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	CMPL	DX, $32
	0x0035 00053 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	SBBL	CX, CX
	0x0037 00055 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	ANDL	CX, AX
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:208)	ADDQ	$16, SP
	0x003d 00061 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:208)	POPQ	BP
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:208)	RET
	0x003f 00063 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	MOVQ	SI, AX
	0x0042 00066 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	MOVQ	BX, CX
	0x0045 00069 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	PCDATA	$1, $1
	0x0045 00069 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:207)	CALL	runtime.panicIndex(SB)
	0x004a 00074 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	MOVQ	DI, AX
	0x004d 00077 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	MOVQ	BX, CX
	0x0050 00080 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	CALL	runtime.panicIndex(SB)
	0x0055 00085 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/bmi.go:205)	XCHGL	AX, AX
	0x0000 55 48 89 e5 48 83 ec 10 48 89 44 24 20 48 39 fb  UH..H...H.D$ H9.
	0x0010 76 38 c4 e2 43 f7 14 b8 48 8d 77 01 48 83 ff 20  v8..C...H.w.H.. 
	0x0020 45 19 c0 44 21 c2 48 39 f3 76 14 c4 e2 69 f7 44  E..D!.H9.v...i.D
	0x0030 b8 04 83 fa 20 19 c9 21 c8 48 83 c4 10 5d c3 48  .... ..!.H...].H
	0x0040 89 f0 48 89 d9 e8 00 00 00 00 48 89 f8 48 89 d9  ..H.......H..H..
	0x0050 e8 00 00 00 00 90                                ......
	rel 70+4 t=R_CALL runtime.panicIndex<1>+0
	rel 81+4 t=R_CALL runtime.panicIndex<1>+0
go:cuinfo.producer.command-line-arguments<0> SDWARFCUINFO dupok size=0
	0x0000 72 65 67 61 62 69                                regabi
go:cuinfo.packagename.command-line-arguments<0> SDWARFCUINFO dupok size=0
	0x0000 63 6f 64 65 67 65 6e                             codegen
go:info.command-line-arguments.blsr64$abstract<0> SDWARFABSFCN dupok size=43
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 72 36 34 00 01  guments.blsr64..
	0x0020 27 01 13 78 00 00 00 00 00 00 00                 '..x.......
	rel 38+4 t=R_DWARFSECREF go:info.int64<0>+0
go:info.command-line-arguments.blsr32$abstract<0> SDWARFABSFCN dupok size=43
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 72 33 32 00 01  guments.blsr32..
	0x0020 2c 01 13 78 00 00 00 00 00 00 00                 ,..x.......
	rel 38+4 t=R_DWARFSECREF go:info.int32<0>+0
go:info.command-line-arguments.isPowerOfTwo64$abstract<0> SDWARFABSFCN dupok size=51
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 36 34 00 01 31 01 13 78 00 00 00 00  fTwo64..1..x....
	0x0030 00 00 00                                         ...
	rel 46+4 t=R_DWARFSECREF go:info.int64<0>+0
go:info.command-line-arguments.isPowerOfTwo32$abstract<0> SDWARFABSFCN dupok size=51
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 33 32 00 01 36 01 13 78 00 00 00 00  fTwo32..6..x....
	0x0030 00 00 00                                         ...
	rel 46+4 t=R_DWARFSECREF go:info.int32<0>+0
go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0> SDWARFABSFCN dupok size=54
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 36 34 00 01 65 01 13 78 00  erOfTwo64..e..x.
	0x0030 00 00 00 00 00 00                                ......
	rel 49+4 t=R_DWARFSECREF go:info.int64<0>+0
go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0> SDWARFABSFCN dupok size=54
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 33 32 00 01 6a 01 13 78 00  erOfTwo32..j..x.
	0x0030 00 00 00 00 00 00                                ......
	rel 49+4 t=R_DWARFSECREF go:info.int32<0>+0
go:string."false"<0> SRODATA dupok size=5
	0x0000 66 61 6c 73 65                                   false
runtime.memequal64·f<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.memequal64<1>+0
runtime.gcbits.0100000000000000<0> SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
type:.namedata.*func(bool)-<0> SRODATA dupok size=13
	0x0000 00 0b 2a 66 75 6e 63 28 62 6f 6f 6c 29           ..*func(bool)
type:*func(bool)<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 eb 47 ed 35 08 08 08 36 00 00 00 00 00 00 00 00  .G.5...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(bool)-<0>+0
	rel 48+8 t=R_ADDR type:func(bool)<0>+0
type:func(bool)<0> SRODATA dupok size=64
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 3f 24 95 95 02 08 08 33 00 00 00 00 00 00 00 00  ?$.....3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(bool)-<0>+0
	rel 44+4 t=RelocType(-32763) type:*func(bool)<0>+0
	rel 56+8 t=R_ADDR type:bool<0>+0
type:.namedata.*func(string)-<0> SRODATA dupok size=15
	0x0000 00 0d 2a 66 75 6e 63 28 73 74 72 69 6e 67 29     ..*func(string)
type:*func(string)<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 0e 4e 14 46 08 08 08 36 00 00 00 00 00 00 00 00  .N.F...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(string)-<0>+0
	rel 48+8 t=R_ADDR type:func(string)<0>+0
type:func(string)<0> SRODATA dupok size=64
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 8c 51 ac f7 02 08 08 33 00 00 00 00 00 00 00 00  .Q.....3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(string)-<0>+0
	rel 44+4 t=RelocType(-32763) type:*func(string)<0>+0
	rel 56+8 t=R_ADDR type:string<0>+0
gclocals·g2BeySu+wFnoycgXfElmcg==<0> SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
command-line-arguments.andn64.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 08 08 08 ff                                   .....
command-line-arguments.andn64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.andn32.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 04 04 04 ff                                   .....
command-line-arguments.andn32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsi64.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
command-line-arguments.blsi64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsi32.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
command-line-arguments.blsi32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsmsk64.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
command-line-arguments.blsmsk64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsmsk32.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
command-line-arguments.blsmsk32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsr64.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
command-line-arguments.blsr64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.blsr32.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
command-line-arguments.blsr32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isPowerOfTwo64.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
command-line-arguments.isPowerOfTwo64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isPowerOfTwo32.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
command-line-arguments.isPowerOfTwo32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isPowerOfTwoSelect64.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 08 08 08 10 08 ff                             .......
command-line-arguments.isPowerOfTwoSelect64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isPowerOfTwoSelect32.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 04 04 04 08 04 ff                             .......
command-line-arguments.isPowerOfTwoSelect32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
gclocals·jGrZsD7lYjdYP8VEa+BSQQ==<0> SRODATA dupok size=10
	0x0000 02 00 00 00 03 00 00 00 06 00                    ..........
gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==<0> SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
command-line-arguments.isPowerOfTwoBranch64.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 08 08 08 10 08 ff                             .......
command-line-arguments.isPowerOfTwoBranch64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isPowerOfTwoBranch32.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 04 08 08 10 08 ff                             .......
command-line-arguments.isPowerOfTwoBranch32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwo64.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
command-line-arguments.isNotPowerOfTwo64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwo32.arginfo1<0> SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
command-line-arguments.isNotPowerOfTwo32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwoSelect64.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 08 08 08 10 08 ff                             .......
command-line-arguments.isNotPowerOfTwoSelect64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwoSelect32.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 04 04 04 08 04 ff                             .......
command-line-arguments.isNotPowerOfTwoSelect32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwoBranch64.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 08 08 08 10 08 ff                             .......
command-line-arguments.isNotPowerOfTwoBranch64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.isNotPowerOfTwoBranch32.arginfo1<0> SRODATA static dupok size=7
	0x0000 00 04 08 08 10 08 ff                             .......
command-line-arguments.isNotPowerOfTwoBranch32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.sarx64.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 08 08 08 ff                                   .....
command-line-arguments.sarx64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.sarx32.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 04 04 04 ff                                   .....
command-line-arguments.sarx32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
gclocals·wgcWObbY2HYnK2SU/U22lA==<0> SRODATA dupok size=10
	0x0000 02 00 00 00 01 00 00 00 01 00                    ..........
command-line-arguments.sarx64_load.arginfo1<0> SRODATA static dupok size=11
	0x0000 fe 00 08 08 08 10 08 fd 18 08 ff                 ...........
command-line-arguments.sarx64_load.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.sarx32_load.arginfo1<0> SRODATA static dupok size=11
	0x0000 fe 00 08 08 08 10 08 fd 18 08 ff                 ...........
command-line-arguments.sarx32_load.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.shlrx64.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 08 08 08 ff                                   .....
command-line-arguments.shlrx64.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.shlrx32.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 04 04 04 ff                                   .....
command-line-arguments.shlrx32.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.shlrx64_load.arginfo1<0> SRODATA static dupok size=13
	0x0000 fe 00 08 08 08 10 08 fd 18 08 20 08 ff           .......... ..
command-line-arguments.shlrx64_load.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.shlrx32_load.arginfo1<0> SRODATA static dupok size=13
	0x0000 fe 00 08 08 08 10 08 fd 18 08 20 04 ff           .......... ..
command-line-arguments.shlrx32_load.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
aux for command-line-arguments.andn64<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.andn64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.andn64<1>+0
aux for command-line-arguments.andn64<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 05 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.andn64<1>+0
aux for command-line-arguments.andn64<0> SDWARFFCN size=94
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 61 6e 64 6e 36 34 00 00  guments.andn64..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 09 01 12 78 00 00 09 00 00 00 00  ........x.......
	0x0040 00 00 00 00 12 79 00 00 09 00 00 00 00 00 00 00  .....y..........
	0x0050 00 11 7e 72 30 00 01 09 00 00 00 00 00 00        ..~r0.........
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.andn64<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.andn64<1>+6
	rel 60+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 64+4 t=R_DWARFSECREF <0>+0
	rel 73+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 77+4 t=R_DWARFSECREF <0>+51
	rel 88+4 t=R_DWARFSECREF go:info.int64<0>+0
aux for command-line-arguments.andn32<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.andn32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.andn32<1>+0
aux for command-line-arguments.andn32<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 0a 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.andn32<1>+0
aux for command-line-arguments.andn32<0> SDWARFFCN size=94
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 61 6e 64 6e 33 32 00 00  guments.andn32..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 0e 01 12 78 00 00 0e 00 00 00 00  ........x.......
	0x0040 00 00 00 00 12 79 00 00 0e 00 00 00 00 00 00 00  .....y..........
	0x0050 00 11 7e 72 30 00 01 0e 00 00 00 00 00 00        ..~r0.........
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.andn32<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.andn32<1>+6
	rel 60+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 64+4 t=R_DWARFSECREF <0>+0
	rel 73+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 77+4 t=R_DWARFSECREF <0>+51
	rel 88+4 t=R_DWARFSECREF go:info.int32<0>+0
aux for command-line-arguments.blsi64<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsi64<1>+0
aux for command-line-arguments.blsi64<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 0f 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsi64<1>+0
aux for command-line-arguments.blsi64<0> SDWARFFCN size=81
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 69 36 34 00 00  guments.blsi64..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 13 01 12 78 00 00 13 00 00 00 00  ........x.......
	0x0040 00 00 00 00 11 7e 72 30 00 01 13 00 00 00 00 00  .....~r0........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.blsi64<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.blsi64<1>+6
	rel 60+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 64+4 t=R_DWARFSECREF <0>+0
	rel 75+4 t=R_DWARFSECREF go:info.int64<0>+0
aux for command-line-arguments.blsi32<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsi32<1>+0
aux for command-line-arguments.blsi32<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 14 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsi32<1>+0
aux for command-line-arguments.blsi32<0> SDWARFFCN size=81
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 69 33 32 00 00  guments.blsi32..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 18 01 12 78 00 00 18 00 00 00 00  ........x.......
	0x0040 00 00 00 00 11 7e 72 30 00 01 18 00 00 00 00 00  .....~r0........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.blsi32<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.blsi32<1>+6
	rel 60+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 64+4 t=R_DWARFSECREF <0>+0
	rel 75+4 t=R_DWARFSECREF go:info.int32<0>+0
aux for command-line-arguments.blsmsk64<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsmsk64<1>+0
aux for command-line-arguments.blsmsk64<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 19 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsmsk64<1>+0
aux for command-line-arguments.blsmsk64<0> SDWARFFCN size=83
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 6d 73 6b 36 34  guments.blsmsk64
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 01 9c 02 00 00 00 1d 01 12 78 00 00 1d 00 00  ..........x.....
	0x0040 00 00 00 00 00 00 11 7e 72 30 00 01 1d 00 00 00  .......~r0......
	0x0050 00 00 00                                         ...
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 33+8 t=R_ADDR command-line-arguments.blsmsk64<1>+0
	rel 41+8 t=R_ADDR command-line-arguments.blsmsk64<1>+6
	rel 62+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 66+4 t=R_DWARFSECREF <0>+0
	rel 77+4 t=R_DWARFSECREF go:info.int64<0>+0
aux for command-line-arguments.blsmsk32<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsmsk32<1>+0
aux for command-line-arguments.blsmsk32<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 1e 14  ................
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsmsk32<1>+0
aux for command-line-arguments.blsmsk32<0> SDWARFFCN size=83
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 62 6c 73 6d 73 6b 33 32  guments.blsmsk32
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 01 9c 02 00 00 00 22 01 12 78 00 00 22 00 00  ......."..x.."..
	0x0040 00 00 00 00 00 00 11 7e 72 30 00 01 22 00 00 00  .......~r0.."...
	0x0050 00 00 00                                         ...
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 33+8 t=R_ADDR command-line-arguments.blsmsk32<1>+0
	rel 41+8 t=R_ADDR command-line-arguments.blsmsk32<1>+6
	rel 62+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 66+4 t=R_DWARFSECREF <0>+0
	rel 77+4 t=R_DWARFSECREF go:info.int32<0>+0
aux for command-line-arguments.blsr64<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsr64<1>+0
aux for command-line-arguments.blsr64<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 23 14  ..............#.
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsr64<1>+0
aux for command-line-arguments.blsr64<0> SDWARFFCN size=45
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 27 00 00 00 00 00 00           .~r0..'......
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.blsr64<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.blsr64<1>+6
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.int64<0>+0
aux for command-line-arguments.blsr32<0> SDWARFLOC size=51
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00                                         ...
	rel 8+8 t=R_ADDR command-line-arguments.blsr32<1>+0
aux for command-line-arguments.blsr32<0> SDWARFLINES size=23
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 28 14  ..............(.
	0x0010 06 41 02 01 00 01 01                             .A.....
	rel 3+8 t=R_ADDR command-line-arguments.blsr32<1>+0
aux for command-line-arguments.blsr32<0> SDWARFFCN size=45
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 2c 00 00 00 00 00 00           .~r0..,......
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.blsr32<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.blsr32<1>+6
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.int32<0>+0
aux for command-line-arguments.isPowerOfTwo64<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00  ................
	0x0050 00 00 00 01 00 50 00 00 00 00 00 00 00 00 00 00  .....P..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+0
aux for command-line-arguments.isPowerOfTwo64<0> SDWARFLINES size=29
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 2b 14  ..............+.
	0x0010 03 7c 15 03 05 46 06 2d 02 01 00 01 01           .|...F.-.....
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+0
aux for command-line-arguments.isPowerOfTwo64<0> SDWARFFCN size=81
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 31 00 00 00 00 00 08 00 00 00  .~r0..1.........
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 02 00 00 00 33 15 00 00 00 00 00 00 00 00 00  .....3..........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:bool<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+10
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+42
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.bool<0>+0
	rel 45+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 49+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+1
	rel 57+8 t=R_ADDR command-line-arguments.isPowerOfTwo64<1>+6
	rel 71+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 75+4 t=R_DWARFSECREF <0>+51
aux for command-line-arguments.isPowerOfTwo32<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00  ................
	0x0050 00 00 00 01 00 50 00 00 00 00 00 00 00 00 00 00  .....P..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+0
aux for command-line-arguments.isPowerOfTwo32<0> SDWARFLINES size=29
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 30 14  ..............0.
	0x0010 03 7c 15 03 05 46 06 2d 02 01 00 01 01           .|...F.-.....
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+0
aux for command-line-arguments.isPowerOfTwo32<0> SDWARFFCN size=81
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 36 00 00 00 00 00 08 00 00 00  .~r0..6.........
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 02 00 00 00 38 15 00 00 00 00 00 00 00 00 00  .....8..........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:bool<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+10
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+42
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.bool<0>+0
	rel 45+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 49+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+1
	rel 57+8 t=R_ADDR command-line-arguments.isPowerOfTwo32<1>+6
	rel 71+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 75+4 t=R_DWARFSECREF <0>+51
aux for command-line-arguments.isPowerOfTwoSelect64<0> SDWARFLOC size=306
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0b 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 12 00 00 00 00 00 00 00 01 00 53 00 00 00 00  ...........S....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 11 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff  ................
	0x0100 ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00  ................
	0x0110 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00 01  ................
	0x0120 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .P..............
	0x0130 00 00                                            ..
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 263+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
aux for command-line-arguments.isPowerOfTwoSelect64<0> SDWARFLINES size=36
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 35 14  ..............5.
	0x0010 03 7c 15 03 7a 15 03 16 46 06 37 06 03 7e 47 02  .|..z...F.7..~G.
	0x0020 01 00 01 01                                      ....
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
aux for command-line-arguments.isPowerOfTwoSelect64<0> SDWARFFCN size=205
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 53 65 6c 65 63 74 36 34 00 00 00 00  fTwoSelect64....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02  ................
	0x0040 00 00 00 3b 01 12 78 00 00 3b 00 00 00 00 00 00  ...;..x..;......
	0x0050 00 00 12 61 00 00 3b 00 00 00 00 00 00 00 00 12  ...a..;.........
	0x0060 62 00 00 3b 00 00 00 00 00 00 00 00 11 7e 72 30  b..;.........~r0
	0x0070 00 01 3b 00 00 00 00 00 0d 72 00 3c 00 00 00 00  ..;......r.<....
	0x0080 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0090 00 00 00 00 00 00 00 00 00 02 00 00 00 3e 15 00  .............>..
	0x00a0 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x00b0 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00c0 33 15 00 00 00 00 00 00 00 00 00 00 00           3............
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 45+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+0
	rel 53+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+18
	rel 74+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 78+4 t=R_DWARFSECREF <0>+0
	rel 87+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 91+4 t=R_DWARFSECREF <0>+51
	rel 100+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 104+4 t=R_DWARFSECREF <0>+102
	rel 115+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 124+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 128+4 t=R_DWARFSECREF <0>+153
	rel 133+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+0
	rel 137+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+1
	rel 145+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+7
	rel 159+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+42
	rel 163+4 t=R_DWARFSECREF <0>+204
	rel 168+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 172+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+2
	rel 180+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect64<1>+7
	rel 194+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 198+4 t=R_DWARFSECREF <0>+255
aux for command-line-arguments.isPowerOfTwoSelect32<0> SDWARFLOC size=306
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0a 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 0f 00 00 00 00 00 00 00 01 00 53 00 00 00 00  ...........S....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 0e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff  ................
	0x0100 ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00  ................
	0x0110 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 01  ................
	0x0120 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .P..............
	0x0130 00 00                                            ..
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 263+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
aux for command-line-arguments.isPowerOfTwoSelect32<0> SDWARFLINES size=37
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 c1 00  ................
	0x0010 14 03 75 15 03 7a 15 03 1d 46 06 2d 06 03 7e 33  ..u..z...F.-..~3
	0x0020 02 01 00 01 01                                   .....
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
aux for command-line-arguments.isPowerOfTwoSelect32<0> SDWARFFCN size=205
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 53 65 6c 65 63 74 33 32 00 00 00 00  fTwoSelect32....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02  ................
	0x0040 00 00 00 47 01 12 78 00 00 47 00 00 00 00 00 00  ...G..x..G......
	0x0050 00 00 12 61 00 00 47 00 00 00 00 00 00 00 00 12  ...a..G.........
	0x0060 62 00 00 47 00 00 00 00 00 00 00 00 11 7e 72 30  b..G.........~r0
	0x0070 00 01 47 00 00 00 00 00 0d 72 00 48 00 00 00 00  ..G......r.H....
	0x0080 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0090 00 00 00 00 00 00 00 00 00 02 00 00 00 4a 15 00  .............J..
	0x00a0 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x00b0 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00c0 38 15 00 00 00 00 00 00 00 00 00 00 00           8............
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 45+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+0
	rel 53+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+15
	rel 74+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 78+4 t=R_DWARFSECREF <0>+0
	rel 87+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 91+4 t=R_DWARFSECREF <0>+51
	rel 100+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 104+4 t=R_DWARFSECREF <0>+102
	rel 115+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 124+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 128+4 t=R_DWARFSECREF <0>+153
	rel 133+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+0
	rel 137+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+1
	rel 145+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+7
	rel 159+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+42
	rel 163+4 t=R_DWARFSECREF <0>+204
	rel 168+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 172+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+2
	rel 180+8 t=R_ADDR command-line-arguments.isPowerOfTwoSelect32<1>+7
	rel 194+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 198+4 t=R_DWARFSECREF <0>+255
aux for command-line-arguments.isPowerOfTwoBranch64<0> SDWARFLOC size=255
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 23 00 00 00 00  ...........#....
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 1e 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 1e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ...............
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
aux for command-line-arguments.isPowerOfTwoBranch64<0> SDWARFLINES size=45
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 cd 00  ................
	0x0010 14 0a 73 03 64 33 03 7a 15 03 27 46 24 06 2d 06  ..s.d3.z..'F$.-.
	0x0020 89 06 2d 06 bb 03 7d 47 02 25 00 01 01           ..-...}G.%...
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
aux for command-line-arguments.isPowerOfTwoBranch64<0> SDWARFFCN size=181
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 42 72 61 6e 63 68 36 34 00 00 00 00  fTwoBranch64....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02  ................
	0x0040 00 00 00 53 01 12 78 00 00 53 00 00 00 00 00 00  ...S..x..S......
	0x0050 00 00 12 61 00 00 53 00 00 00 00 00 00 00 00 12  ...a..S.........
	0x0060 62 00 00 53 00 00 00 00 00 00 00 00 08 00 00 00  b..S............
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 02 00 00 00 55 15 00 00 00 00 00 00 00 00 08  .....U..........
	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00a0 00 00 00 00 02 00 00 00 33 15 00 00 00 00 00 00  ........3.......
	0x00b0 00 00 00 00 00                                   .....
	rel 45+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+0
	rel 53+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+100
	rel 74+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 78+4 t=R_DWARFSECREF <0>+0
	rel 87+4 t=R_DWARFSECREF go:info.func(bool)<0>+0
	rel 91+4 t=R_DWARFSECREF <0>+51
	rel 100+4 t=R_DWARFSECREF go:info.func(string)<0>+0
	rel 104+4 t=R_DWARFSECREF <0>+102
	rel 109+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+0
	rel 113+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+14
	rel 121+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+20
	rel 135+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo64$abstract<0>+42
	rel 139+4 t=R_DWARFSECREF <0>+153
	rel 144+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 148+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+15
	rel 156+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch64<1>+20
	rel 170+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 174+4 t=R_DWARFSECREF <0>+204
aux for command-line-arguments.isPowerOfTwoBranch32<0> SDWARFLOC size=255
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 23 00 00 00 00  ...........#....
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 1e 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 1e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ...............
	rel 8+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
aux for command-line-arguments.isPowerOfTwoBranch32<0> SDWARFLINES size=45
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 d6 00  ................
	0x0010 14 0a 73 03 60 33 03 7a 15 03 2b 46 24 06 2d 06  ..s.`3.z..+F$.-.
	0x0020 89 06 2d 06 bb 03 7d 47 02 23 00 01 01           ..-...}G.#...
	rel 3+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
aux for command-line-arguments.isPowerOfTwoBranch32<0> SDWARFFCN size=181
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 50 6f 77 65 72 4f  guments.isPowerO
	0x0020 66 54 77 6f 42 72 61 6e 63 68 33 32 00 00 00 00  fTwoBranch32....
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 02  ................
	0x0040 00 00 00 5c 01 12 78 00 00 5c 00 00 00 00 00 00  ...\..x..\......
	0x0050 00 00 12 61 00 00 5c 00 00 00 00 00 00 00 00 12  ...a..\.........
	0x0060 62 00 00 5c 00 00 00 00 00 00 00 00 08 00 00 00  b..\............
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 02 00 00 00 5e 15 00 00 00 00 00 00 00 00 08  .....^..........
	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00a0 00 00 00 00 02 00 00 00 38 15 00 00 00 00 00 00  ........8.......
	0x00b0 00 00 00 00 00                                   .....
	rel 45+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+0
	rel 53+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+98
	rel 74+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 78+4 t=R_DWARFSECREF <0>+0
	rel 87+4 t=R_DWARFSECREF go:info.func(bool)<0>+0
	rel 91+4 t=R_DWARFSECREF <0>+51
	rel 100+4 t=R_DWARFSECREF go:info.func(string)<0>+0
	rel 104+4 t=R_DWARFSECREF <0>+102
	rel 109+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+0
	rel 113+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+14
	rel 121+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+20
	rel 135+4 t=R_DWARFSECREF go:info.command-line-arguments.isPowerOfTwo32$abstract<0>+42
	rel 139+4 t=R_DWARFSECREF <0>+153
	rel 144+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 148+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+15
	rel 156+8 t=R_ADDR command-line-arguments.isPowerOfTwoBranch32<1>+20
	rel 170+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 174+4 t=R_DWARFSECREF <0>+204
aux for command-line-arguments.isNotPowerOfTwo64<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00  ................
	0x0050 00 00 00 01 00 50 00 00 00 00 00 00 00 00 00 00  .....P..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+0
aux for command-line-arguments.isNotPowerOfTwo64<0> SDWARFLINES size=30
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 df 00  ................
	0x0010 14 03 48 15 03 39 46 06 2d 02 01 00 01 01        ..H..9F.-.....
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+0
aux for command-line-arguments.isNotPowerOfTwo64<0> SDWARFFCN size=81
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 65 00 00 00 00 00 08 00 00 00  .~r0..e.........
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 02 00 00 00 67 15 00 00 00 00 00 00 00 00 00  .....g..........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:bool<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+10
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+45
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.bool<0>+0
	rel 45+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 49+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+1
	rel 57+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo64<1>+6
	rel 71+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 75+4 t=R_DWARFSECREF <0>+51
aux for command-line-arguments.isNotPowerOfTwo32<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 00  ................
	0x0050 00 00 00 01 00 50 00 00 00 00 00 00 00 00 00 00  .....P..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+0
aux for command-line-arguments.isNotPowerOfTwo32<0> SDWARFLINES size=30
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 e4 00  ................
	0x0010 14 03 48 15 03 39 46 06 2d 02 01 00 01 01        ..H..9F.-.....
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+0
aux for command-line-arguments.isNotPowerOfTwo32<0> SDWARFFCN size=81
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 6a 00 00 00 00 00 08 00 00 00  .~r0..j.........
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 02 00 00 00 6c 15 00 00 00 00 00 00 00 00 00  .....l..........
	0x0050 00                                               .
	rel 0+0 t=R_USETYPE type:bool<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+10
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+45
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.bool<0>+0
	rel 45+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 49+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+1
	rel 57+8 t=R_ADDR command-line-arguments.isNotPowerOfTwo32<1>+6
	rel 71+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 75+4 t=R_DWARFSECREF <0>+51
aux for command-line-arguments.isNotPowerOfTwoSelect64<0> SDWARFLOC size=306
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 12 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0b 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 12 00 00 00 00 00 00 00 01 00 53 00 00 00 00  ...........S....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 11 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff  ................
	0x0100 ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00  ................
	0x0110 00 00 00 00 00 00 00 11 00 00 00 00 00 00 00 01  ................
	0x0120 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .P..............
	0x0130 00 00                                            ..
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 263+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
aux for command-line-arguments.isNotPowerOfTwoSelect64<0> SDWARFLINES size=38
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 e9 00  ................
	0x0010 14 03 7c 15 03 46 15 03 ca 00 46 06 37 06 03 7e  ..|..F....F.7..~
	0x0020 47 02 01 00 01 01                                G.....
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
aux for command-line-arguments.isNotPowerOfTwoSelect64<0> SDWARFFCN size=208
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 53 65 6c 65 63 74 36 34 00  erOfTwoSelect64.
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 9c 02 00 00 00 6f 01 12 78 00 00 6f 00 00 00  ......o..x..o...
	0x0050 00 00 00 00 00 12 61 00 00 6f 00 00 00 00 00 00  ......a..o......
	0x0060 00 00 12 62 00 00 6f 00 00 00 00 00 00 00 00 11  ...b..o.........
	0x0070 7e 72 30 00 01 6f 00 00 00 00 00 0d 72 00 70 00  ~r0..o......r.p.
	0x0080 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00a0 72 15 00 00 00 00 00 00 00 00 08 00 00 00 00 00  r...............
	0x00b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02  ................
	0x00c0 00 00 00 67 15 00 00 00 00 00 00 00 00 00 00 00  ...g............
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 48+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+0
	rel 56+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+18
	rel 77+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 81+4 t=R_DWARFSECREF <0>+0
	rel 90+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 94+4 t=R_DWARFSECREF <0>+51
	rel 103+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 107+4 t=R_DWARFSECREF <0>+102
	rel 118+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 127+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 131+4 t=R_DWARFSECREF <0>+153
	rel 136+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+0
	rel 140+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+1
	rel 148+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+7
	rel 162+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+45
	rel 166+4 t=R_DWARFSECREF <0>+204
	rel 171+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 175+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+2
	rel 183+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect64<1>+7
	rel 197+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 201+4 t=R_DWARFSECREF <0>+255
aux for command-line-arguments.isNotPowerOfTwoSelect32<0> SDWARFLOC size=306
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 0f 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0a 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 0f 00 00 00 00 00 00 00 01 00 53 00 00 00 00  ...........S....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 0e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff  ................
	0x0100 ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00  ................
	0x0110 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 01  ................
	0x0120 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .P..............
	0x0130 00 00                                            ..
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 263+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
aux for command-line-arguments.isNotPowerOfTwoSelect32<0> SDWARFLINES size=38
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 f5 00  ................
	0x0010 14 03 75 15 03 46 15 03 d1 00 46 06 2d 06 03 7e  ..u..F....F.-..~
	0x0020 33 02 01 00 01 01                                3.....
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
aux for command-line-arguments.isNotPowerOfTwoSelect32<0> SDWARFFCN size=208
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 53 65 6c 65 63 74 33 32 00  erOfTwoSelect32.
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 9c 02 00 00 00 7b 01 12 78 00 00 7b 00 00 00  ......{..x..{...
	0x0050 00 00 00 00 00 12 61 00 00 7b 00 00 00 00 00 00  ......a..{......
	0x0060 00 00 12 62 00 00 7b 00 00 00 00 00 00 00 00 11  ...b..{.........
	0x0070 7e 72 30 00 01 7b 00 00 00 00 00 0d 72 00 7c 00  ~r0..{......r.|.
	0x0080 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00a0 7e 15 00 00 00 00 00 00 00 00 08 00 00 00 00 00  ~...............
	0x00b0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02  ................
	0x00c0 00 00 00 6c 15 00 00 00 00 00 00 00 00 00 00 00  ...l............
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 48+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+0
	rel 56+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+15
	rel 77+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 81+4 t=R_DWARFSECREF <0>+0
	rel 90+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 94+4 t=R_DWARFSECREF <0>+51
	rel 103+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 107+4 t=R_DWARFSECREF <0>+102
	rel 118+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 127+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 131+4 t=R_DWARFSECREF <0>+153
	rel 136+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+0
	rel 140+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+1
	rel 148+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+7
	rel 162+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+45
	rel 166+4 t=R_DWARFSECREF <0>+204
	rel 171+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 175+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+2
	rel 183+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoSelect32<1>+7
	rel 197+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 201+4 t=R_DWARFSECREF <0>+255
aux for command-line-arguments.isNotPowerOfTwoBranch64<0> SDWARFLOC size=255
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 23 00 00 00 00  ...........#....
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 1e 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 1e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ...............
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
aux for command-line-arguments.isNotPowerOfTwoBranch64<0> SDWARFLINES size=46
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 81 01  ................
	0x0010 14 0a 73 03 64 33 03 46 15 03 db 00 46 24 06 2d  ..s.d3.F....F$.-
	0x0020 06 89 06 2d 06 bb 03 7d 47 02 25 00 01 01        ...-...}G.%...
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
aux for command-line-arguments.isNotPowerOfTwoBranch64<0> SDWARFFCN size=189
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 42 72 61 6e 63 68 36 34 00  erOfTwoBranch64.
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 9c 02 00 00 00 87 01 01 12 78 00 00 87 01 00  ..........x.....
	0x0050 00 00 00 00 00 00 00 12 61 00 00 87 01 00 00 00  ........a.......
	0x0060 00 00 00 00 00 12 62 00 00 87 01 00 00 00 00 00  ......b.........
	0x0070 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 00 00 00 00 00 00 00 02 00 00 00 89 01 15 00  ................
	0x0090 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x00a0 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00b0 67 15 00 00 00 00 00 00 00 00 00 00 00           g............
	rel 48+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+0
	rel 56+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+100
	rel 79+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 83+4 t=R_DWARFSECREF <0>+0
	rel 93+4 t=R_DWARFSECREF go:info.func(bool)<0>+0
	rel 97+4 t=R_DWARFSECREF <0>+51
	rel 107+4 t=R_DWARFSECREF go:info.func(string)<0>+0
	rel 111+4 t=R_DWARFSECREF <0>+102
	rel 116+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+0
	rel 120+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+14
	rel 128+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+20
	rel 143+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo64$abstract<0>+45
	rel 147+4 t=R_DWARFSECREF <0>+153
	rel 152+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+0
	rel 156+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+15
	rel 164+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch64<1>+20
	rel 178+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr64$abstract<0>+34
	rel 182+4 t=R_DWARFSECREF <0>+204
aux for command-line-arguments.isNotPowerOfTwoBranch32<0> SDWARFLOC size=255
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 23 00 00 00 00  ...........#....
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 00 00 00 00 00 00 00  ........R.......
	0x0090 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff  ................
	0x00a0 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00b0 00 1e 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00c0 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff  ................
	0x00d0 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00e0 00 00 00 00 1e 00 00 00 00 00 00 00 01 00 50 00  ..............P.
	0x00f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ...............
	rel 8+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
	rel 161+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
	rel 212+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
aux for command-line-arguments.isNotPowerOfTwoBranch32<0> SDWARFLINES size=46
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 8a 01  ................
	0x0010 14 0a 73 03 60 33 03 46 15 03 df 00 46 24 06 2d  ..s.`3.F....F$.-
	0x0020 06 89 06 2d 06 bb 03 7d 47 02 23 00 01 01        ...-...}G.#...
	rel 3+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
aux for command-line-arguments.isNotPowerOfTwoBranch32<0> SDWARFFCN size=189
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 73 4e 6f 74 50 6f 77  guments.isNotPow
	0x0020 65 72 4f 66 54 77 6f 42 72 61 6e 63 68 33 32 00  erOfTwoBranch32.
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 9c 02 00 00 00 90 01 01 12 78 00 00 90 01 00  ..........x.....
	0x0050 00 00 00 00 00 00 00 12 61 00 00 90 01 00 00 00  ........a.......
	0x0060 00 00 00 00 00 12 62 00 00 90 01 00 00 00 00 00  ......b.........
	0x0070 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 00 00 00 00 00 00 00 02 00 00 00 92 01 15 00  ................
	0x0090 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00  ................
	0x00a0 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
	0x00b0 6c 15 00 00 00 00 00 00 00 00 00 00 00           l............
	rel 48+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+0
	rel 56+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+98
	rel 79+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 83+4 t=R_DWARFSECREF <0>+0
	rel 93+4 t=R_DWARFSECREF go:info.func(bool)<0>+0
	rel 97+4 t=R_DWARFSECREF <0>+51
	rel 107+4 t=R_DWARFSECREF go:info.func(string)<0>+0
	rel 111+4 t=R_DWARFSECREF <0>+102
	rel 116+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+0
	rel 120+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+14
	rel 128+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+20
	rel 143+4 t=R_DWARFSECREF go:info.command-line-arguments.isNotPowerOfTwo32$abstract<0>+45
	rel 147+4 t=R_DWARFSECREF <0>+153
	rel 152+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+0
	rel 156+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+15
	rel 164+8 t=R_ADDR command-line-arguments.isNotPowerOfTwoBranch32<1>+20
	rel 178+4 t=R_DWARFSECREF go:info.command-line-arguments.blsr32$abstract<0>+34
	rel 182+4 t=R_DWARFSECREF <0>+204
aux for command-line-arguments.sarx64<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1b 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 16 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.sarx64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.sarx64<1>+0
aux for command-line-arguments.sarx64<0> SDWARFLINES size=33
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 93 01  ................
	0x0010 14 0a 19 2f 06 2d 06 23 06 37 06 ff 02 01 00 01  .../.-.#.7......
	0x0020 01                                               .
	rel 3+8 t=R_ADDR command-line-arguments.sarx64<1>+0
aux for command-line-arguments.sarx64<0> SDWARFFCN size=98
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 61 72 78 36 34 00 00  guments.sarx64..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 99 01 01 12 78 00 00 99 01 00 00  .........x......
	0x0040 00 00 00 00 00 00 12 79 00 00 99 01 00 00 00 00  .......y........
	0x0050 00 00 00 00 11 7e 72 30 00 01 99 01 00 00 00 00  .....~r0........
	0x0060 00 00                                            ..
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.sarx64<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.sarx64<1>+38
	rel 62+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 66+4 t=R_DWARFSECREF <0>+0
	rel 76+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 80+4 t=R_DWARFSECREF <0>+51
	rel 92+4 t=R_DWARFSECREF go:info.int64<0>+0
aux for command-line-arguments.sarx32<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 11 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR command-line-arguments.sarx32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.sarx32<1>+0
aux for command-line-arguments.sarx32<0> SDWARFLINES size=33
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 98 01  ................
	0x0010 14 0a 19 2f 06 23 06 23 06 2d 06 c3 02 01 00 01  .../.#.#.-......
	0x0020 01                                               .
	rel 3+8 t=R_ADDR command-line-arguments.sarx32<1>+0
aux for command-line-arguments.sarx32<0> SDWARFFCN size=98
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 61 72 78 33 32 00 00  guments.sarx32..
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................
	0x0030 9c 02 00 00 00 9e 01 01 12 78 00 00 9e 01 00 00  .........x......
	0x0040 00 00 00 00 00 00 12 79 00 00 9e 01 00 00 00 00  .......y........
	0x0050 00 00 00 00 11 7e 72 30 00 01 9e 01 00 00 00 00  .....~r0........
	0x0060 00 00                                            ..
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 31+8 t=R_ADDR command-line-arguments.sarx32<1>+0
	rel 39+8 t=R_ADDR command-line-arguments.sarx32<1>+30
	rel 62+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 66+4 t=R_DWARFSECREF <0>+0
	rel 76+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 80+4 t=R_DWARFSECREF <0>+51
	rel 92+4 t=R_DWARFSECREF go:info.int32<0>+0
aux for command-line-arguments.sarx64_load<0> SDWARFLOC size=263
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00  ........,.......
	0x0020 09 00 50 93 08 53 93 08 52 93 08 2c 00 00 00 00  ..P..S..R..,....
	0x0030 00 00 00 38 00 00 00 00 00 00 00 08 00 93 08 53  ...8...........S
	0x0040 93 08 52 93 08 38 00 00 00 00 00 00 00 40 00 00  ..R..8.......@..
	0x0050 00 00 00 00 00 07 00 93 08 53 93 08 93 08 40 00  .........S....@.
	0x0060 00 00 00 00 00 00 43 00 00 00 00 00 00 00 08 00  ......C.........
	0x0070 93 08 53 93 08 52 93 08 43 00 00 00 00 00 00 00  ..S..R..C.......
	0x0080 49 00 00 00 00 00 00 00 07 00 93 08 53 93 08 93  I...........S...
	0x0090 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00a0 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00  ................
	0x00b0 00 00 00 00 00 00 00 00 00 49 00 00 00 00 00 00  .........I......
	0x00c0 00 01 00 55 00 00 00 00 00 00 00 00 00 00 00 00  ...U............
	0x00d0 00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00  ................
	0x00e0 00 00 00 00 20 00 00 00 00 00 00 00 3d 00 00 00  .... .......=...
	0x00f0 00 00 00 00 01 00 54 00 00 00 00 00 00 00 00 00  ......T.........
	0x0100 00 00 00 00 00 00 00                             .......
	rel 8+8 t=R_ADDR command-line-arguments.sarx64_load<1>+0
	rel 169+8 t=R_ADDR command-line-arguments.sarx64_load<1>+0
	rel 220+8 t=R_ADDR command-line-arguments.sarx64_load<1>+0
aux for command-line-arguments.sarx64_load<0> SDWARFLINES size=42
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 9d 01  ................
	0x0010 14 0a 37 06 37 06 43 06 2d 06 25 06 35 75 06 88  ..7.7.C.-.%.5u..
	0x0020 06 4a 7b 06 7d 02 01 00 01 01                    .J{.}.....
	rel 3+8 t=R_ADDR command-line-arguments.sarx64_load<1>+0
aux for command-line-arguments.sarx64_load<0> SDWARFFCN size=116
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 61 72 78 36 34 5f 6c  guments.sarx64_l
	0x0020 6f 61 64 00 00 00 00 00 00 00 00 00 00 00 00 00  oad.............
	0x0030 00 00 00 00 01 9c 02 00 00 00 a3 01 01 12 78 00  ..............x.
	0x0040 00 a3 01 00 00 00 00 00 00 00 00 12 69 00 00 a3  ............i...
	0x0050 01 00 00 00 00 00 00 00 00 11 7e 72 30 00 01 a3  ..........~r0...
	0x0060 01 00 00 00 00 00 0d 73 00 a5 01 00 00 00 00 00  .......s........
	0x0070 00 00 00 00                                      ....
	rel 0+0 t=R_USETYPE type:int64<0>+0
	rel 36+8 t=R_ADDR command-line-arguments.sarx64_load<1>+0
	rel 44+8 t=R_ADDR command-line-arguments.sarx64_load<1>+73
	rel 67+4 t=R_DWARFSECREF go:info.[]int64<0>+0
	rel 71+4 t=R_DWARFSECREF <0>+0
	rel 81+4 t=R_DWARFSECREF go:info.int<0>+0
	rel 85+4 t=R_DWARFSECREF <0>+161
	rel 97+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 107+4 t=R_DWARFSECREF go:info.int64<0>+0
	rel 111+4 t=R_DWARFSECREF <0>+212
aux for command-line-arguments.sarx32_load<0> SDWARFLOC size=352
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 3c 00 00 00 00 00 00 00  ........<.......
	0x0020 09 00 50 93 08 53 93 08 52 93 08 3c 00 00 00 00  ..P..S..R..<....
	0x0030 00 00 00 47 00 00 00 00 00 00 00 08 00 50 93 08  ...G.........P..
	0x0040 53 93 08 93 08 47 00 00 00 00 00 00 00 50 00 00  S....G.......P..
	0x0050 00 00 00 00 00 07 00 93 08 53 93 08 93 08 50 00  .........S....P.
	0x0060 00 00 00 00 00 00 53 00 00 00 00 00 00 00 08 00  ......S.........
	0x0070 93 08 53 93 08 52 93 08 53 00 00 00 00 00 00 00  ..S..R..S.......
	0x0080 5b 00 00 00 00 00 00 00 07 00 93 08 53 93 08 93  [...........S...
	0x0090 08 5b 00 00 00 00 00 00 00 60 00 00 00 00 00 00  .[.......`......
	0x00a0 00 08 00 93 08 53 93 08 52 93 08 60 00 00 00 00  .....S..R..`....
	0x00b0 00 00 00 66 00 00 00 00 00 00 00 07 00 93 08 53  ...f...........S
	0x00c0 93 08 93 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00d0 00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00  ................
	0x00e0 00 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00  ................
	0x00f0 00 00 00 00 01 00 55 00 00 00 00 00 00 00 00 00  ......U.........
	0x0100 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00  ................
	0x0110 00 00 00 00 00 00 00 2f 00 00 00 00 00 00 00 37  ......./.......7
	0x0120 00 00 00 00 00 00 00 01 00 55 47 00 00 00 00 00  .........UG.....
	0x0130 00 00 4d 00 00 00 00 00 00 00 01 00 50 4d 00 00  ..M.........PM..
	0x0140 00 00 00 00 00 58 00 00 00 00 00 00 00 01 00 55  .....X.........U
	0x0150 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 8+8 t=R_ADDR command-line-arguments.sarx32_load<1>+0
	rel 220+8 t=R_ADDR command-line-arguments.sarx32_load<1>+0
	rel 271+8 t=R_ADDR command-line-arguments.sarx32_load<1>+0
aux for command-line-arguments.sarx32_load<0> SDWARFLINES size=43
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 a5 01  ................
	0x0010 14 0a 37 06 37 06 43 06 2d 06 61 06 35 cf 06 08  ..7.7.C.-.a.5...
	0x0020 10 06 4a 7b 06 91 02 01 00 01 01                 ..J{.......
	rel 3+8 t=R_ADDR command-line-arguments.sarx32_load<1>+0
aux for command-line-arguments.sarx32_load<0> SDWARFFCN size=116
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 61 72 78 33 32 5f 6c  guments.sarx32_l
	0x0020 6f 61 64 00 00 00 00 00 00 00 00 00 00 00 00 00  oad.............
	0x0030 00 00 00 00 01 9c 02 00 00 00 ab 01 01 12 78 00  ..............x.
	0x0040 00 ab 01 00 00 00 00 00 00 00 00 12 69 00 00 ab  ............i...
	0x0050 01 00 00 00 00 00 00 00 00 11 7e 72 30 00 01 ab  ..........~r0...
	0x0060 01 00 00 00 00 00 0d 73 00 ad 01 00 00 00 00 00  .......s........
	0x0070 00 00 00 00                                      ....
	rel 0+0 t=R_USETYPE type:int32<0>+0
	rel 36+8 t=R_ADDR command-line-arguments.sarx32_load<1>+0
	rel 44+8 t=R_ADDR command-line-arguments.sarx32_load<1>+102
	rel 67+4 t=R_DWARFSECREF go:info.[]int32<0>+0
	rel 71+4 t=R_DWARFSECREF <0>+0
	rel 81+4 t=R_DWARFSECREF go:info.int<0>+0
	rel 85+4 t=R_DWARFSECREF <0>+212
	rel 97+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 107+4 t=R_DWARFSECREF go:info.int32<0>+0
	rel 111+4 t=R_DWARFSECREF <0>+263
aux for command-line-arguments.shlrx64<0> SDWARFLOC size=172
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 14 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 17 00 00 00 00 00 00  ........R.......
	0x0090 00 18 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00a0 00 00 00 00 00 00 00 00 00 00 00 00              ............
	rel 8+8 t=R_ADDR command-line-arguments.shlrx64<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.shlrx64<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.shlrx64<1>+0
aux for command-line-arguments.shlrx64<0> SDWARFLINES size=32
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 af 01  ................
	0x0010 14 06 41 06 39 2b 2f 06 41 06 2e 02 01 00 01 01  ..A.9+/.A.......
	rel 3+8 t=R_ADDR command-line-arguments.shlrx64<1>+0
aux for command-line-arguments.shlrx64<0> SDWARFFCN size=112
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 68 6c 72 78 36 34 00  guments.shlrx64.
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 9c 02 00 00 00 b3 01 01 12 78 00 00 b3 01 00  ..........x.....
	0x0040 00 00 00 00 00 00 00 12 79 00 00 b3 01 00 00 00  ........y.......
	0x0050 00 00 00 00 00 11 7e 72 30 00 01 b3 01 00 00 00  ......~r0.......
	0x0060 00 00 0d 73 00 b5 01 00 00 00 00 00 00 00 00 00  ...s............
	rel 0+0 t=R_USETYPE type:uint64<0>+0
	rel 32+8 t=R_ADDR command-line-arguments.shlrx64<1>+0
	rel 40+8 t=R_ADDR command-line-arguments.shlrx64<1>+24
	rel 63+4 t=R_DWARFSECREF go:info.uint64<0>+0
	rel 67+4 t=R_DWARFSECREF <0>+0
	rel 77+4 t=R_DWARFSECREF go:info.uint64<0>+0
	rel 81+4 t=R_DWARFSECREF <0>+51
	rel 93+4 t=R_DWARFSECREF go:info.uint64<0>+0
	rel 103+4 t=R_DWARFSECREF go:info.uint64<0>+0
	rel 107+4 t=R_DWARFSECREF <0>+102
aux for command-line-arguments.shlrx32<0> SDWARFLOC size=172
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 00  ................
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00  ................
	0x0070 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 11 00  ................
	0x0080 00 00 00 00 00 00 01 00 52 13 00 00 00 00 00 00  ........R.......
	0x0090 00 14 00 00 00 00 00 00 00 01 00 50 00 00 00 00  ...........P....
	0x00a0 00 00 00 00 00 00 00 00 00 00 00 00              ............
	rel 8+8 t=R_ADDR command-line-arguments.shlrx32<1>+0
	rel 59+8 t=R_ADDR command-line-arguments.shlrx32<1>+0
	rel 110+8 t=R_ADDR command-line-arguments.shlrx32<1>+0
aux for command-line-arguments.shlrx32<0> SDWARFLINES size=32
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 b7 01  ................
	0x0010 14 06 41 06 2f 21 25 06 41 06 24 02 01 00 01 01  ..A./!%.A.$.....
	rel 3+8 t=R_ADDR command-line-arguments.shlrx32<1>+0
aux for command-line-arguments.shlrx32<0> SDWARFFCN size=112
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 68 6c 72 78 33 32 00  guments.shlrx32.
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 9c 02 00 00 00 bb 01 01 12 78 00 00 bb 01 00  ..........x.....
	0x0040 00 00 00 00 00 00 00 12 79 00 00 bb 01 00 00 00  ........y.......
	0x0050 00 00 00 00 00 11 7e 72 30 00 01 bb 01 00 00 00  ......~r0.......
	0x0060 00 00 0d 73 00 bd 01 00 00 00 00 00 00 00 00 00  ...s............
	rel 0+0 t=R_USETYPE type:uint32<0>+0
	rel 32+8 t=R_ADDR command-line-arguments.shlrx32<1>+0
	rel 40+8 t=R_ADDR command-line-arguments.shlrx32<1>+20
	rel 63+4 t=R_DWARFSECREF go:info.uint32<0>+0
	rel 67+4 t=R_DWARFSECREF <0>+0
	rel 77+4 t=R_DWARFSECREF go:info.uint32<0>+0
	rel 81+4 t=R_DWARFSECREF <0>+51
	rel 93+4 t=R_DWARFSECREF go:info.uint32<0>+0
	rel 103+4 t=R_DWARFSECREF go:info.uint32<0>+0
	rel 107+4 t=R_DWARFSECREF <0>+102
aux for command-line-arguments.shlrx64_load<0> SDWARFLOC size=314
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00  ........2.......
	0x0020 09 00 50 93 08 53 93 08 52 93 08 32 00 00 00 00  ..P..S..R..2....
	0x0030 00 00 00 39 00 00 00 00 00 00 00 08 00 93 08 53  ...9...........S
	0x0040 93 08 52 93 08 39 00 00 00 00 00 00 00 45 00 00  ..R..9.......E..
	0x0050 00 00 00 00 00 07 00 93 08 53 93 08 93 08 45 00  .........S....E.
	0x0060 00 00 00 00 00 00 48 00 00 00 00 00 00 00 08 00  ......H.........
	0x0070 93 08 53 93 08 52 93 08 48 00 00 00 00 00 00 00  ..S..R..H.......
	0x0080 50 00 00 00 00 00 00 00 07 00 93 08 53 93 08 93  P...........S...
	0x0090 08 50 00 00 00 00 00 00 00 53 00 00 00 00 00 00  .P.......S......
	0x00a0 00 08 00 93 08 53 93 08 52 93 08 53 00 00 00 00  .....S..R..S....
	0x00b0 00 00 00 59 00 00 00 00 00 00 00 07 00 93 08 53  ...Y...........S
	0x00c0 93 08 93 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00d0 00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00  ................
	0x00e0 00 00 00 00 00 00 00 00 00 00 00 00 59 00 00 00  ............Y...
	0x00f0 00 00 00 00 01 00 55 00 00 00 00 00 00 00 00 00  ......U.........
	0x0100 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00  ................
	0x0110 00 00 00 00 00 00 00 26 00 00 00 00 00 00 00 4d  .......&.......M
	0x0120 00 00 00 00 00 00 00 01 00 51 00 00 00 00 00 00  .........Q......
	0x0130 00 00 00 00 00 00 00 00 00 00                    ..........
	rel 8+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+0
	rel 220+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+0
	rel 271+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+0
aux for command-line-arguments.shlrx64_load<0> SDWARFLINES size=42
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 bd 01  ................
	0x0010 14 0a 37 06 37 06 43 06 2d 06 61 06 35 75 06 ec  ..7.7.C.-.a.5u..
	0x0020 06 4a 7b 06 7d 02 01 00 01 01                    .J{.}.....
	rel 3+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+0
aux for command-line-arguments.shlrx64_load<0> SDWARFFCN size=118
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 68 6c 72 78 36 34 5f  guments.shlrx64_
	0x0020 6c 6f 61 64 00 00 00 00 00 00 00 00 00 00 00 00  load............
	0x0030 00 00 00 00 00 01 9c 02 00 00 00 c3 01 01 12 78  ...............x
	0x0040 00 00 c3 01 00 00 00 00 00 00 00 00 12 69 00 00  .............i..
	0x0050 c3 01 00 00 00 00 00 00 00 00 12 73 00 00 c3 01  ...........s....
	0x0060 00 00 00 00 00 00 00 00 11 7e 72 30 00 01 c3 01  .........~r0....
	0x0070 00 00 00 00 00 00                                ......
	rel 0+0 t=R_USETYPE type:uint64<0>+0
	rel 37+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+0
	rel 45+8 t=R_ADDR command-line-arguments.shlrx64_load<1>+89
	rel 68+4 t=R_DWARFSECREF go:info.[]uint64<0>+0
	rel 72+4 t=R_DWARFSECREF <0>+0
	rel 82+4 t=R_DWARFSECREF go:info.int<0>+0
	rel 86+4 t=R_DWARFSECREF <0>+212
	rel 96+4 t=R_DWARFSECREF go:info.uint64<0>+0
	rel 100+4 t=R_DWARFSECREF <0>+263
	rel 112+4 t=R_DWARFSECREF go:info.uint64<0>+0
aux for command-line-arguments.shlrx32_load<0> SDWARFLOC size=314
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00  ........2.......
	0x0020 09 00 50 93 08 53 93 08 52 93 08 32 00 00 00 00  ..P..S..R..2....
	0x0030 00 00 00 37 00 00 00 00 00 00 00 08 00 93 08 53  ...7...........S
	0x0040 93 08 52 93 08 37 00 00 00 00 00 00 00 42 00 00  ..R..7.......B..
	0x0050 00 00 00 00 00 07 00 93 08 53 93 08 93 08 42 00  .........S....B.
	0x0060 00 00 00 00 00 00 45 00 00 00 00 00 00 00 08 00  ......E.........
	0x0070 93 08 53 93 08 52 93 08 45 00 00 00 00 00 00 00  ..S..R..E.......
	0x0080 4d 00 00 00 00 00 00 00 07 00 93 08 53 93 08 93  M...........S...
	0x0090 08 4d 00 00 00 00 00 00 00 50 00 00 00 00 00 00  .M.......P......
	0x00a0 00 08 00 93 08 53 93 08 52 93 08 50 00 00 00 00  .....S..R..P....
	0x00b0 00 00 00 56 00 00 00 00 00 00 00 07 00 93 08 53  ...V...........S
	0x00c0 93 08 93 08 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00d0 00 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00  ................
	0x00e0 00 00 00 00 00 00 00 00 00 00 00 00 56 00 00 00  ............V...
	0x00f0 00 00 00 00 01 00 55 00 00 00 00 00 00 00 00 00  ......U.........
	0x0100 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00  ................
	0x0110 00 00 00 00 00 00 00 26 00 00 00 00 00 00 00 4a  .......&.......J
	0x0120 00 00 00 00 00 00 00 01 00 51 00 00 00 00 00 00  .........Q......
	0x0130 00 00 00 00 00 00 00 00 00 00                    ..........
	rel 8+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+0
	rel 220+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+0
	rel 271+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+0
aux for command-line-arguments.shlrx32_load<0> SDWARFLINES size=42
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 c5 01  ................
	0x0010 14 0a 37 06 37 06 43 06 2d 06 61 06 35 75 06 ce  ..7.7.C.-.a.5u..
	0x0020 06 4a 7b 06 7d 02 01 00 01 01                    .J{.}.....
	rel 3+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+0
aux for command-line-arguments.shlrx32_load<0> SDWARFFCN size=118
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 73 68 6c 72 78 33 32 5f  guments.shlrx32_
	0x0020 6c 6f 61 64 00 00 00 00 00 00 00 00 00 00 00 00  load............
	0x0030 00 00 00 00 00 01 9c 02 00 00 00 cb 01 01 12 78  ...............x
	0x0040 00 00 cb 01 00 00 00 00 00 00 00 00 12 69 00 00  .............i..
	0x0050 cb 01 00 00 00 00 00 00 00 00 12 73 00 00 cb 01  ...........s....
	0x0060 00 00 00 00 00 00 00 00 11 7e 72 30 00 01 cb 01  .........~r0....
	0x0070 00 00 00 00 00 00                                ......
	rel 0+0 t=R_USETYPE type:uint32<0>+0
	rel 37+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+0
	rel 45+8 t=R_ADDR command-line-arguments.shlrx32_load<1>+86
	rel 68+4 t=R_DWARFSECREF go:info.[]uint32<0>+0
	rel 72+4 t=R_DWARFSECREF <0>+0
	rel 82+4 t=R_DWARFSECREF go:info.int<0>+0
	rel 86+4 t=R_DWARFSECREF <0>+212
	rel 96+4 t=R_DWARFSECREF go:info.uint32<0>+0
	rel 100+4 t=R_DWARFSECREF <0>+263
	rel 112+4 t=R_DWARFSECREF go:info.uint32<0>+0
