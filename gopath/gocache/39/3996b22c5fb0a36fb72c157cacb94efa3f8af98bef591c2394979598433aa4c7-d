//go:cgo_ldflag "-fsanitize=thread"
//go:cgo_ldflag "-fPIC"
//go:cgo_ldflag "-static-libtsan"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_7c051958758e_Cfunc_foo
//go:linkname __cgofn__cgo_7c051958758e_Cfunc_foo _cgo_7c051958758e_Cfunc_foo
var __cgofn__cgo_7c051958758e_Cfunc_foo byte
var _cgo_7c051958758e_Cfunc_foo = unsafe.Pointer(&__cgofn__cgo_7c051958758e_Cfunc_foo)

//go:cgo_unsafe_args
func _Cfunc_foo() (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_7c051958758e_Cfunc_foo, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_export_dynamic go_callback
//go:linkname _cgoexp_7c051958758e_go_callback _cgoexp_7c051958758e_go_callback
//go:cgo_export_static _cgoexp_7c051958758e_go_callback
func _cgoexp_7c051958758e_go_callback(a *struct {
	}) {
	go_callback()
}
