# command-line-arguments
command-line-arguments.init<1> STEXT nosplit size=1 args=0x0 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	command-line-arguments.init(SB), NOSPLIT|NOFRAME|PKGINIT|ABIInternal, $0-0
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB)
	0x0000 00000 (<autogenerated>:1)	RET
	0x0000 c3                                               .
command-line-arguments.NopConvertIface<1> STEXT nosplit size=11 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	TEXT	command-line-arguments.NopConvertIface(SB), NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	MOVQ	AX, command-line-arguments.x+8(FP)
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	MOVQ	BX, command-line-arguments.x+16(FP)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	FUNCDATA	$0, gclocals·IuErl7MOXaHVn7EZYWzfFA==(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	FUNCDATA	$5, command-line-arguments.NopConvertIface.arginfo1(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	FUNCDATA	$6, command-line-arguments.NopConvertIface.argliveinfo(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:11)	PCDATA	$3, $1
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:13)	RET
	0x0000 48 89 44 24 08 48 89 5c 24 10 c3                 H.D$.H.\$..
command-line-arguments.ConvToM<1> STEXT size=152 args=0x10 locals=0x20 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	TEXT	command-line-arguments.ConvToM(SB), ABIInternal, $32-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	CMPQ	SP, 16(R14)
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$0, $-2
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	JLS	122
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$0, $-1
	0x0006 00006 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PUSHQ	BP
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	SP, BP
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	SUBQ	$24, SP
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	AX, command-line-arguments.x+40(FP)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	BX, command-line-arguments.x+48(FP)
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	FUNCDATA	$0, gclocals·IuErl7MOXaHVn7EZYWzfFA==(SB)
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	FUNCDATA	$5, command-line-arguments.ConvToM.arginfo1(SB)
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	FUNCDATA	$6, command-line-arguments.ConvToM.argliveinfo(SB)
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$3, $1
	0x0018 00024 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	TESTQ	AX, AX
	0x001b 00027 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	JEQ	109
	0x001d 00029 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	command-line-arguments..typeAssert.0(SB), CX
	0x0024 00036 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	(CX), DX
	0x0027 00039 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVL	16(AX), SI
	0x002a 00042 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	SI, DI
	0x002d 00045 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	ANDQ	DX, SI
	0x0030 00048 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	SHLQ	$4, SI
	0x0034 00052 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	8(SI)(CX*1), R8
	0x0039 00057 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	CMPQ	AX, R8
	0x003c 00060 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	JEQ	98
	0x003e 00062 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	LEAQ	1(DI), SI
	0x0042 00066 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	TESTQ	R8, R8
	0x0045 00069 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	JNE	42
	0x0047 00071 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	BX, command-line-arguments.x+48(SP)
	0x004c 00076 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	PCDATA	$3, $2
	0x004c 00076 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	AX, BX
	0x004f 00079 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	LEAQ	command-line-arguments..typeAssert.0(SB), AX
	0x0056 00086 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	PCDATA	$1, $0
	0x0056 00086 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	CALL	runtime.typeAssert(SB)
	0x005b 00091 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	command-line-arguments.x+48(SP), BX
	0x0060 00096 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	JMP	103
	0x0062 00098 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	PCDATA	$3, $1
	0x0062 00098 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	MOVQ	16(SI)(CX*1), AX
	0x0067 00103 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	ADDQ	$24, SP
	0x006b 00107 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	POPQ	BP
	0x006c 00108 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	RET
	0x006d 00109 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	LEAQ	type:command-line-arguments.I(SB), AX
	0x0074 00116 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	PCDATA	$1, $1
	0x0074 00116 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	CALL	runtime.panicnildottype(SB)
	0x0079 00121 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	XCHGL	AX, AX
	0x007a 00122 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:26)	NOP
	0x007a 00122 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$1, $-1
	0x007a 00122 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$0, $-2
	0x007a 00122 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	AX, 8(SP)
	0x007f 00127 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	BX, 16(SP)
	0x0084 00132 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	CALL	runtime.morestack_noctxt(SB)
	0x0089 00137 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	PCDATA	$0, $-1
	0x0089 00137 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	8(SP), AX
	0x008e 00142 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	MOVQ	16(SP), BX
	0x0093 00147 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:23)	JMP	0
	0x0000 49 3b 66 10 76 74 55 48 89 e5 48 83 ec 18 48 89  I;f.vtUH..H...H.
	0x0010 44 24 28 48 89 5c 24 30 48 85 c0 74 50 48 8b 0d  D$(H.\$0H..tPH..
	0x0020 00 00 00 00 48 8b 11 8b 70 10 48 89 f7 48 21 d6  ....H...p.H..H!.
	0x0030 48 c1 e6 04 4c 8b 44 0e 08 4c 39 c0 74 24 48 8d  H...L.D..L9.t$H.
	0x0040 77 01 4d 85 c0 75 e3 48 89 5c 24 30 48 89 c3 48  w.M..u.H.\$0H..H
	0x0050 8d 05 00 00 00 00 e8 00 00 00 00 48 8b 5c 24 30  ...........H.\$0
	0x0060 eb 05 48 8b 44 0e 10 48 83 c4 18 5d c3 48 8d 05  ..H.D..H...].H..
	0x0070 00 00 00 00 e8 00 00 00 00 90 48 89 44 24 08 48  ..........H.D$.H
	0x0080 89 5c 24 10 e8 00 00 00 00 48 8b 44 24 08 48 8b  .\$......H.D$.H.
	0x0090 5c 24 10 e9 68 ff ff ff                          \$..h...
	rel 32+4 t=R_PCREL command-line-arguments..typeAssert.0<0>+0
	rel 82+4 t=R_PCREL command-line-arguments..typeAssert.0<0>+0
	rel 87+4 t=R_CALL runtime.typeAssert<1>+0
	rel 112+4 t=R_PCREL type:command-line-arguments.I<0>+0
	rel 117+4 t=R_CALL runtime.panicnildottype<1>+0
	rel 133+4 t=R_CALL runtime.morestack_noctxt<0>+0
command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<1> STEXT dupok nosplit size=17 args=0x18 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	TEXT	command-line-arguments.NopConvertGeneric[go.shape.interface { M() }](SB), DUPOK|NOSPLIT|NOFRAME|ABIInternal, $0-24
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	BX, command-line-arguments.x+16(FP)
	0x0005 00005 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	CX, command-line-arguments.x+24(FP)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$0, gclocals·pjkiW5J2QfpsfPzMt9QzFQ==(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$5, command-line-arguments.NopConvertGeneric[go.shape.interface { M() }].arginfo1(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$6, command-line-arguments.NopConvertGeneric[go.shape.interface { M() }].argliveinfo(SB)
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	PCDATA	$3, $1
	0x000a 00010 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:18)	MOVQ	BX, AX
	0x000d 00013 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:18)	MOVQ	CX, BX
	0x0010 00016 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:18)	RET
	0x0000 48 89 5c 24 10 48 89 4c 24 18 48 89 d8 48 89 cb  H.\$.H.L$.H..H..
	0x0010 c3                                               .
command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1> STEXT dupok nosplit size=37 args=0x10 locals=0x0 funcid=0x16 align=0x0
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	TEXT	command-line-arguments.NopConvertGeneric[command-line-arguments.I](SB), DUPOK|NOSPLIT|WRAPPER|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	32(R14), R12
	0x0004 00004 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	TESTQ	R12, R12
	0x0007 00007 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	JNE	20
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	NOP
	0x0009 00009 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	AX, command-line-arguments.x+8(FP)
	0x000e 00014 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	BX, command-line-arguments.x+16(FP)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$0, gclocals·IuErl7MOXaHVn7EZYWzfFA==(SB)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$5, command-line-arguments.NopConvertGeneric[command-line-arguments.I].arginfo1(SB)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	FUNCDATA	$6, command-line-arguments.NopConvertGeneric[command-line-arguments.I].argliveinfo(SB)
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	PCDATA	$3, $1
	0x0013 00019 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	RET
	0x0014 00020 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	LEAQ	8(SP), R13
	0x0019 00025 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	CMPQ	(R12), R13
	0x001d 00029 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	JNE	9
	0x001f 00031 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	MOVQ	SP, (R12)
	0x0023 00035 (/home/xzl/work/golang-1.22/golang-1.22/test/codegen/ifaces.go:16)	JMP	9
	0x0000 4d 8b 66 20 4d 85 e4 75 0b 48 89 44 24 08 48 89  M.f M..u.H.D$.H.
	0x0010 5c 24 10 c3 4c 8d 6c 24 08 4d 39 2c 24 75 ea 49  \$..L.l$.M9,$u.I
	0x0020 89 24 24 eb e4                                   .$$..
command-line-arguments.I.M<1> STEXT dupok size=92 args=0x10 locals=0x10 funcid=0x16 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	command-line-arguments.I.M(SB), DUPOK|WRAPPER|ABIInternal, $16-16
	0x0000 00000 (<autogenerated>:1)	CMPQ	SP, 16(R14)
	0x0004 00004 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0004 00004 (<autogenerated>:1)	JLS	48
	0x0006 00006 (<autogenerated>:1)	PCDATA	$0, $-1
	0x0006 00006 (<autogenerated>:1)	PUSHQ	BP
	0x0007 00007 (<autogenerated>:1)	MOVQ	SP, BP
	0x000a 00010 (<autogenerated>:1)	SUBQ	$8, SP
	0x000e 00014 (<autogenerated>:1)	MOVQ	32(R14), R12
	0x0012 00018 (<autogenerated>:1)	TESTQ	R12, R12
	0x0015 00021 (<autogenerated>:1)	JNE	75
	0x0017 00023 (<autogenerated>:1)	NOP
	0x0017 00023 (<autogenerated>:1)	MOVQ	AX, command-line-arguments.~p0+24(FP)
	0x001c 00028 (<autogenerated>:1)	MOVQ	BX, command-line-arguments.~p0+32(FP)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$0, gclocals·IuErl7MOXaHVn7EZYWzfFA==(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$5, command-line-arguments.I.M.arginfo1(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$6, command-line-arguments.I.M.argliveinfo(SB)
	0x0021 00033 (<autogenerated>:1)	PCDATA	$3, $1
	0x0021 00033 (<autogenerated>:1)	MOVQ	24(AX), CX
	0x0025 00037 (<autogenerated>:1)	MOVQ	BX, AX
	0x0028 00040 (<autogenerated>:1)	PCDATA	$1, $1
	0x0028 00040 (<autogenerated>:1)	CALL	CX
	0x002a 00042 (<autogenerated>:1)	ADDQ	$8, SP
	0x002e 00046 (<autogenerated>:1)	POPQ	BP
	0x002f 00047 (<autogenerated>:1)	RET
	0x0030 00048 (<autogenerated>:1)	NOP
	0x0030 00048 (<autogenerated>:1)	PCDATA	$1, $-1
	0x0030 00048 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0030 00048 (<autogenerated>:1)	MOVQ	AX, 8(SP)
	0x0035 00053 (<autogenerated>:1)	MOVQ	BX, 16(SP)
	0x003a 00058 (<autogenerated>:1)	CALL	runtime.morestack_noctxt(SB)
	0x003f 00063 (<autogenerated>:1)	PCDATA	$0, $-1
	0x003f 00063 (<autogenerated>:1)	MOVQ	8(SP), AX
	0x0044 00068 (<autogenerated>:1)	MOVQ	16(SP), BX
	0x0049 00073 (<autogenerated>:1)	JMP	0
	0x004b 00075 (<autogenerated>:1)	LEAQ	24(SP), R13
	0x0050 00080 (<autogenerated>:1)	CMPQ	(R12), R13
	0x0054 00084 (<autogenerated>:1)	JNE	23
	0x0056 00086 (<autogenerated>:1)	MOVQ	SP, (R12)
	0x005a 00090 (<autogenerated>:1)	JMP	23
	0x0000 49 3b 66 10 76 2a 55 48 89 e5 48 83 ec 08 4d 8b  I;f.v*UH..H...M.
	0x0010 66 20 4d 85 e4 75 34 48 89 44 24 18 48 89 5c 24  f M..u4H.D$.H.\$
	0x0020 20 48 8b 48 18 48 89 d8 ff d1 48 83 c4 08 5d c3   H.H.H....H...].
	0x0030 48 89 44 24 08 48 89 5c 24 10 e8 00 00 00 00 48  H.D$.H.\$......H
	0x0040 8b 44 24 08 48 8b 5c 24 10 eb b5 4c 8d 6c 24 18  .D$.H.\$...L.l$.
	0x0050 4d 39 2c 24 75 c1 49 89 24 24 eb bb              M9,$u.I.$$..
	rel 2+0 t=R_USEIFACEMETHOD type:command-line-arguments.I<0>+96
	rel 40+0 t=R_CALLIND +0
	rel 59+4 t=R_CALL runtime.morestack_noctxt<0>+0
go.shape.interface { M() }.M<1> STEXT dupok size=92 args=0x10 locals=0x10 funcid=0x16 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	go.shape.interface { M() }.M(SB), DUPOK|WRAPPER|ABIInternal, $16-16
	0x0000 00000 (<autogenerated>:1)	CMPQ	SP, 16(R14)
	0x0004 00004 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0004 00004 (<autogenerated>:1)	JLS	48
	0x0006 00006 (<autogenerated>:1)	PCDATA	$0, $-1
	0x0006 00006 (<autogenerated>:1)	PUSHQ	BP
	0x0007 00007 (<autogenerated>:1)	MOVQ	SP, BP
	0x000a 00010 (<autogenerated>:1)	SUBQ	$8, SP
	0x000e 00014 (<autogenerated>:1)	MOVQ	32(R14), R12
	0x0012 00018 (<autogenerated>:1)	TESTQ	R12, R12
	0x0015 00021 (<autogenerated>:1)	JNE	75
	0x0017 00023 (<autogenerated>:1)	NOP
	0x0017 00023 (<autogenerated>:1)	MOVQ	AX, go.shape.~p0+24(FP)
	0x001c 00028 (<autogenerated>:1)	MOVQ	BX, go.shape.~p0+32(FP)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$0, gclocals·IuErl7MOXaHVn7EZYWzfFA==(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$5, go.shape.interface { M() }.M.arginfo1(SB)
	0x0021 00033 (<autogenerated>:1)	FUNCDATA	$6, go.shape.interface { M() }.M.argliveinfo(SB)
	0x0021 00033 (<autogenerated>:1)	PCDATA	$3, $1
	0x0021 00033 (<autogenerated>:1)	MOVQ	24(AX), CX
	0x0025 00037 (<autogenerated>:1)	MOVQ	BX, AX
	0x0028 00040 (<autogenerated>:1)	PCDATA	$1, $1
	0x0028 00040 (<autogenerated>:1)	CALL	CX
	0x002a 00042 (<autogenerated>:1)	ADDQ	$8, SP
	0x002e 00046 (<autogenerated>:1)	POPQ	BP
	0x002f 00047 (<autogenerated>:1)	RET
	0x0030 00048 (<autogenerated>:1)	NOP
	0x0030 00048 (<autogenerated>:1)	PCDATA	$1, $-1
	0x0030 00048 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0030 00048 (<autogenerated>:1)	MOVQ	AX, 8(SP)
	0x0035 00053 (<autogenerated>:1)	MOVQ	BX, 16(SP)
	0x003a 00058 (<autogenerated>:1)	CALL	runtime.morestack_noctxt(SB)
	0x003f 00063 (<autogenerated>:1)	PCDATA	$0, $-1
	0x003f 00063 (<autogenerated>:1)	MOVQ	8(SP), AX
	0x0044 00068 (<autogenerated>:1)	MOVQ	16(SP), BX
	0x0049 00073 (<autogenerated>:1)	JMP	0
	0x004b 00075 (<autogenerated>:1)	LEAQ	24(SP), R13
	0x0050 00080 (<autogenerated>:1)	CMPQ	(R12), R13
	0x0054 00084 (<autogenerated>:1)	JNE	23
	0x0056 00086 (<autogenerated>:1)	MOVQ	SP, (R12)
	0x005a 00090 (<autogenerated>:1)	JMP	23
	0x0000 49 3b 66 10 76 2a 55 48 89 e5 48 83 ec 08 4d 8b  I;f.v*UH..H...M.
	0x0010 66 20 4d 85 e4 75 34 48 89 44 24 18 48 89 5c 24  f M..u4H.D$.H.\$
	0x0020 20 48 8b 48 18 48 89 d8 ff d1 48 83 c4 08 5d c3   H.H.H....H...].
	0x0030 48 89 44 24 08 48 89 5c 24 10 e8 00 00 00 00 48  H.D$.H.\$......H
	0x0040 8b 44 24 08 48 8b 5c 24 10 eb b5 4c 8d 6c 24 18  .D$.H.\$...L.l$.
	0x0050 4d 39 2c 24 75 c1 49 89 24 24 eb bb              M9,$u.I.$$..
	rel 2+0 t=R_USENAMEDMETHOD <0>+0
	rel 40+0 t=R_CALLIND +0
	rel 59+4 t=R_CALL runtime.morestack_noctxt<0>+0
type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1> STEXT dupok nosplit size=33 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }(SB), DUPOK|NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$0, gclocals·TjPuuCwdlCpTaRQGRKTrYw==(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$1, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$5, type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }.arginfo1(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$6, type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }.argliveinfo(SB)
	0x0000 00000 (<autogenerated>:1)	PCDATA	$3, $1
	0x0000 00000 (<autogenerated>:1)	MOVQ	(AX), CX
	0x0003 00003 (<autogenerated>:1)	CMPQ	(BX), CX
	0x0006 00006 (<autogenerated>:1)	JNE	29
	0x0008 00008 (<autogenerated>:1)	MOVQ	8(AX), CX
	0x000c 00012 (<autogenerated>:1)	CMPQ	8(BX), CX
	0x0010 00016 (<autogenerated>:1)	JNE	29
	0x0012 00018 (<autogenerated>:1)	MOVBLZX	16(AX), CX
	0x0016 00022 (<autogenerated>:1)	CMPB	16(BX), CL
	0x0019 00025 (<autogenerated>:1)	SETEQ	AL
	0x001c 00028 (<autogenerated>:1)	RET
	0x001d 00029 (<autogenerated>:1)	XORL	AX, AX
	0x001f 00031 (<autogenerated>:1)	NOP
	0x0020 00032 (<autogenerated>:1)	RET
	0x0000 48 8b 08 48 39 0b 75 15 48 8b 48 08 48 39 4b 08  H..H9.u.H.H.H9K.
	0x0010 75 0b 0f b6 48 10 38 4b 10 0f 94 c0 c3 31 c0 90  u...H.8K.....1..
	0x0020 c3                                               .
go:cuinfo.producer.command-line-arguments<0> SDWARFCUINFO dupok size=0
	0x0000 72 65 67 61 62 69                                regabi
command-line-arguments..dict.NopConvertGeneric[command-line-arguments.I]<0> SRODATA dupok size=16
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR type:command-line-arguments.I<0>+0
	rel 0+0 t=R_USEIFACE type:command-line-arguments.I<0>+0
	rel 0+0 t=R_USEIFACE type:command-line-arguments.I<0>+0
	rel 0+0 t=R_USEIFACE type:command-line-arguments.I<0>+0
go:cuinfo.packagename.command-line-arguments<0> SDWARFCUINFO dupok size=0
	0x0000 63 6f 64 65 67 65 6e                             codegen
go:info.command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]$abstract<0> SDWARFABSFCN dupok size=82
	0x0000 05 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 4e 6f 70 43 6f 6e 76 65  guments.NopConve
	0x0020 72 74 47 65 6e 65 72 69 63 5b 67 6f 2e 73 68 61  rtGeneric[go.sha
	0x0030 70 65 2e 69 6e 74 65 72 66 61 63 65 20 7b 20 4d  pe.interface { M
	0x0040 28 29 20 7d 5d 00 01 10 01 13 78 00 00 00 00 00  () }].....x.....
	0x0050 00 00                                            ..
	rel 77+4 t=R_DWARFSECREF go:info.go.shape.interface { M() }<0>+0
runtime.interequal·f<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.interequal<1>+0
runtime.memequal64·f<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.memequal64<1>+0
runtime.gcbits.0100000000000000<0> SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
type:.namedata.*codegen.I.<0> SRODATA dupok size=12
	0x0000 01 0a 2a 63 6f 64 65 67 65 6e 2e 49              ..*codegen.I
type:*command-line-arguments.I<0> SRODATA size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 c7 da e2 60 08 08 08 36 00 00 00 00 00 00 00 00  ...`...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*codegen.I.<0>+0
	rel 48+8 t=R_ADDR type:command-line-arguments.I<0>+0
runtime.gcbits.0200000000000000<0> SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
type:.namedata.*func()-<0> SRODATA dupok size=9
	0x0000 00 07 2a 66 75 6e 63 28 29                       ..*func()
type:*func()<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 75 ac 29 27 08 08 08 36 00 00 00 00 00 00 00 00  u.)'...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func()-<0>+0
	rel 48+8 t=R_ADDR type:func()<0>+0
type:func()<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 fe fa b9 80 02 08 08 33 00 00 00 00 00 00 00 00  .......3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00                                      ....
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func()-<0>+0
	rel 44+4 t=RelocType(-32763) type:*func()<0>+0
type:.importpath.command-line-arguments.<0> SRODATA dupok size=24
	0x0000 00 16 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61  ..command-line-a
	0x0010 72 67 75 6d 65 6e 74 73                          rguments
type:.namedata.M.<0> SRODATA dupok size=3
	0x0000 01 01 4d                                         ..M
type:command-line-arguments.I<0> SRODATA size=104
	0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
	0x0010 0e d1 3f af 07 08 08 14 00 00 00 00 00 00 00 00  ..?.............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00  ................
	0x0060 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.interequal·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0200000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*codegen.I.<0>+0
	rel 44+4 t=R_ADDROFF type:*command-line-arguments.I<0>+0
	rel 48+8 t=R_ADDR type:.importpath.command-line-arguments.<0>+0
	rel 56+8 t=R_ADDR type:command-line-arguments.I<0>+96
	rel 80+4 t=R_ADDROFF type:.importpath.command-line-arguments.<0>+0
	rel 96+4 t=R_ADDROFF type:.namedata.M.<0>+0
	rel 100+4 t=R_ADDROFF type:func()<0>+0
command-line-arguments.NopConvertGenericIface<0> SDATA size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]·f<0>+0
<0> SDWARFVAR size=62
	0x0000 0a 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 4e 6f 70 43 6f 6e 76 65  guments.NopConve
	0x0020 72 74 47 65 6e 65 72 69 63 49 66 61 63 65 00 09  rtGenericIface..
	0x0030 03 00 00 00 00 00 00 00 00 00 00 00 00 01        ..............
	rel 49+8 t=R_ADDR command-line-arguments.NopConvertGenericIface<0>+0
	rel 57+4 t=R_DWARFSECREF go:info.func(command-line-arguments.I) command-line-arguments.I<0>+0
type:.namedata.*func(codegen.I) codegen.I-<0> SRODATA dupok size=28
	0x0000 00 1a 2a 66 75 6e 63 28 63 6f 64 65 67 65 6e 2e  ..*func(codegen.
	0x0010 49 29 20 63 6f 64 65 67 65 6e 2e 49              I) codegen.I
type:*func(command-line-arguments.I) command-line-arguments.I<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 9e f8 c4 6c 08 08 08 36 00 00 00 00 00 00 00 00  ...l...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(codegen.I) codegen.I-<0>+0
	rel 48+8 t=R_ADDR type:func(command-line-arguments.I) command-line-arguments.I<0>+0
type:func(command-line-arguments.I) command-line-arguments.I<0> SRODATA dupok size=72
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 ed 44 d7 b9 02 08 08 33 00 00 00 00 00 00 00 00  .D.....3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(codegen.I) codegen.I-<0>+0
	rel 44+4 t=RelocType(-32763) type:*func(command-line-arguments.I) command-line-arguments.I<0>+0
	rel 56+8 t=R_ADDR type:command-line-arguments.I<0>+0
	rel 64+8 t=R_ADDR type:command-line-arguments.I<0>+0
command-line-arguments..typeAssert.0<0> SDATA size=24
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00                                               .
	rel 0+8 t=R_ADDR runtime.emptyTypeAssertCache<0>+0
	rel 8+8 t=R_ADDR type:command-line-arguments.I<0>+0
type:.eqfunc.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+0
type:.namedata.*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }-<0> SRODATA dupok size=70
	0x0000 00 44 2a 73 74 72 75 63 74 20 7b 20 43 61 63 68  .D*struct { Cach
	0x0010 65 20 75 6e 73 61 66 65 2e 50 6f 69 6e 74 65 72  e unsafe.Pointer
	0x0020 3b 20 49 6e 74 65 72 20 75 6e 73 61 66 65 2e 50  ; Inter unsafe.P
	0x0030 6f 69 6e 74 65 72 3b 20 43 61 6e 46 61 69 6c 20  ointer; CanFail 
	0x0040 62 6f 6f 6c 20 7d                                bool }
type:*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 f8 45 02 db 08 08 08 36 00 00 00 00 00 00 00 00  .E.....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }-<0>+0
	rel 48+8 t=R_ADDR type:struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+0
runtime.gcbits.0300000000000000<0> SRODATA dupok size=8
	0x0000 03 00 00 00 00 00 00 00                          ........
type:.namedata.Cache.<0> SRODATA dupok size=7
	0x0000 01 05 43 61 63 68 65                             ..Cache
type:.namedata.Inter.<0> SRODATA dupok size=7
	0x0000 01 05 49 6e 74 65 72                             ..Inter
type:.namedata.CanFail.<0> SRODATA dupok size=9
	0x0000 01 07 43 61 6e 46 61 69 6c                       ..CanFail
type:struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SRODATA dupok size=152
	0x0000 18 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
	0x0010 38 88 59 31 02 08 08 19 00 00 00 00 00 00 00 00  8.Y1............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 03 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0080 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0090 10 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR type:.eqfunc.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0300000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }-<0>+0
	rel 44+4 t=RelocType(-32763) type:*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+0
	rel 56+8 t=R_ADDR type:struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+80
	rel 80+8 t=R_ADDR type:.namedata.Cache.<0>+0
	rel 88+8 t=R_ADDR type:unsafe.Pointer<0>+0
	rel 104+8 t=R_ADDR type:.namedata.Inter.<0>+0
	rel 112+8 t=R_ADDR type:unsafe.Pointer<0>+0
	rel 128+8 t=R_ADDR type:.namedata.CanFail.<0>+0
	rel 136+8 t=R_ADDR type:bool<0>+0
<0> SRODATA size=1
	0x0000 4d                                               M
type:.namedata.*go.shape.interface { M() }-<0> SRODATA dupok size=29
	0x0000 00 1b 2a 67 6f 2e 73 68 61 70 65 2e 69 6e 74 65  ..*go.shape.inte
	0x0010 72 66 61 63 65 20 7b 20 4d 28 29 20 7d           rface { M() }
type:*go.shape.interface { M() }<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 4a 92 21 7a 08 08 08 36 00 00 00 00 00 00 00 00  J.!z...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*go.shape.interface { M() }-<0>+0
	rel 48+8 t=R_ADDR type:go.shape.interface { M() }<0>+0
type:.importpath.go.shape.<0> SRODATA dupok size=10
	0x0000 00 08 67 6f 2e 73 68 61 70 65                    ..go.shape
type:go.shape.interface { M() }<0> SRODATA dupok size=104
	0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
	0x0010 1a 51 c5 54 07 08 08 14 00 00 00 00 00 00 00 00  .Q.T............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00  ................
	0x0060 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.interequal·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0200000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*go.shape.interface { M() }-<0>+0
	rel 44+4 t=R_ADDROFF type:*go.shape.interface { M() }<0>+0
	rel 48+8 t=R_ADDR type:.importpath.go.shape.<0>+0
	rel 56+8 t=R_ADDR type:go.shape.interface { M() }<0>+96
	rel 80+4 t=R_ADDROFF type:.importpath.go.shape.<0>+0
	rel 96+4 t=R_ADDROFF type:.namedata.M.<0>+0
	rel 100+4 t=R_ADDROFF type:func()<0>+0
type:.namedata.*[2]uintptr-<0> SRODATA dupok size=13
	0x0000 00 0b 2a 5b 32 5d 75 69 6e 74 70 74 72           ..*[2]uintptr
runtime.memequal128·f<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.memequal128<1>+0
runtime.gcbits.<0> SRODATA dupok size=0
type:[2]uintptr<0> SRODATA dupok size=72
	0x0000 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 2e d3 d2 d2 0a 08 08 11 00 00 00 00 00 00 00 00  ................
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 02 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal128·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[2]uintptr-<0>+0
	rel 44+4 t=RelocType(-32763) type:*[2]uintptr<0>+0
	rel 48+8 t=R_ADDR type:uintptr<0>+0
	rel 56+8 t=R_ADDR type:[]uintptr<0>+0
type:*[2]uintptr<0> SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 c2 52 d4 df 08 08 08 36 00 00 00 00 00 00 00 00  .R.....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f<0>+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000<0>+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[2]uintptr-<0>+0
	rel 48+8 t=R_ADDR type:[2]uintptr<0>+0
command-line-arguments.NopConvertGeneric[command-line-arguments.I]·f<0> SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1>+0
gclocals·g2BeySu+wFnoycgXfElmcg==<0> SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
gclocals·IuErl7MOXaHVn7EZYWzfFA==<0> SRODATA dupok size=10
	0x0000 02 00 00 00 02 00 00 00 02 00                    ..........
gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==<0> SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
command-line-arguments.NopConvertIface.arginfo1<0> SRODATA static dupok size=7
	0x0000 fe 00 08 08 08 fd ff                             .......
command-line-arguments.NopConvertIface.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.ConvToM.arginfo1<0> SRODATA static dupok size=7
	0x0000 fe 00 08 08 08 fd ff                             .......
command-line-arguments.ConvToM.argliveinfo<0> SRODATA static dupok size=3
	0x0000 00 00 02                                         ...
gclocals·pjkiW5J2QfpsfPzMt9QzFQ==<0> SRODATA dupok size=10
	0x0000 02 00 00 00 03 00 00 00 04 00                    ..........
command-line-arguments.NopConvertGeneric[go.shape.interface { M() }].arginfo1<0> SRODATA static dupok size=7
	0x0000 fe 08 08 10 08 fd ff                             .......
command-line-arguments.NopConvertGeneric[go.shape.interface { M() }].argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.NopConvertGeneric[command-line-arguments.I].arginfo1<0> SRODATA static dupok size=1
	0x0000 ff                                               .
command-line-arguments.NopConvertGeneric[command-line-arguments.I].argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
command-line-arguments.I.M.arginfo1<0> SRODATA static dupok size=7
	0x0000 fe 00 08 08 08 fd ff                             .......
command-line-arguments.I.M.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
go.shape.interface { M() }.M.arginfo1<0> SRODATA static dupok size=7
	0x0000 fe 00 08 08 08 fd ff                             .......
go.shape.interface { M() }.M.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
gclocals·TjPuuCwdlCpTaRQGRKTrYw==<0> SRODATA dupok size=10
	0x0000 02 00 00 00 02 00 00 00 03 00                    ..........
type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }.arginfo1<0> SRODATA static dupok size=5
	0x0000 00 08 08 08 ff                                   .....
type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }.argliveinfo<0> SRODATA static dupok size=2
	0x0000 00 00                                            ..
aux for command-line-arguments.init<0> SDWARFLINES size=16
	0x0000 00 09 02 00 00 00 00 00 00 00 00 02 01 00 01 01  ................
	rel 3+8 t=R_ADDR command-line-arguments.init<1>+0
aux for command-line-arguments.init<0> SDWARFFCN size=54
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 69 6e 69 74 00 00 00 00  guments.init....
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 01  ................
	0x0030 00 00 00 01 01 00                                ......
	rel 29+8 t=R_ADDR command-line-arguments.init<1>+0
	rel 37+8 t=R_ADDR command-line-arguments.init<1>+1
aux for command-line-arguments.NopConvertIface<0> SDWARFLOC size=56
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00  ................
	0x0020 06 00 50 93 08 53 93 08 00 00 00 00 00 00 00 00  ..P..S..........
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 8+8 t=R_ADDR command-line-arguments.NopConvertIface<1>+0
aux for command-line-arguments.NopConvertIface<0> SDWARFLINES size=24
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 06 03 05  ................
	0x0010 14 06 75 02 01 00 01 01                          ..u.....
	rel 3+8 t=R_ADDR command-line-arguments.NopConvertIface<1>+0
aux for command-line-arguments.NopConvertIface<0> SDWARFFCN size=90
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 4e 6f 70 43 6f 6e 76 65  guments.NopConve
	0x0020 72 74 49 66 61 63 65 00 00 00 00 00 00 00 00 00  rtIface.........
	0x0030 00 00 00 00 00 00 00 00 01 9c 02 00 00 00 0b 01  ................
	0x0040 12 78 00 00 0b 00 00 00 00 00 00 00 00 11 7e 72  .x............~r
	0x0050 30 00 01 0b 00 00 00 00 00 00                    0.........
	rel 0+0 t=R_USETYPE type:command-line-arguments.I<0>+0
	rel 40+8 t=R_ADDR command-line-arguments.NopConvertIface<1>+0
	rel 48+8 t=R_ADDR command-line-arguments.NopConvertIface<1>+11
	rel 69+4 t=R_DWARFSECREF go:info.command-line-arguments.I<0>+0
	rel 73+4 t=R_DWARFSECREF <0>+0
	rel 84+4 t=R_DWARFSECREF go:info.command-line-arguments.I<0>+0
aux for command-line-arguments.ConvToM<0> SDWARFLOC size=152
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 4f 00 00 00 00 00 00 00  ........O.......
	0x0020 06 00 50 93 08 53 93 08 4f 00 00 00 00 00 00 00  ..P..S..O.......
	0x0030 56 00 00 00 00 00 00 00 07 00 50 93 08 91 08 93  V.........P.....
	0x0040 08 56 00 00 00 00 00 00 00 62 00 00 00 00 00 00  .V.......b......
	0x0050 00 06 00 93 08 91 08 93 08 62 00 00 00 00 00 00  .........b......
	0x0060 00 67 00 00 00 00 00 00 00 06 00 50 93 08 53 93  .g.........P..S.
	0x0070 08 67 00 00 00 00 00 00 00 79 00 00 00 00 00 00  .g.......y......
	0x0080 00 05 00 93 08 53 93 08 00 00 00 00 00 00 00 00  .....S..........
	0x0090 00 00 00 00 00 00 00 00                          ........
	rel 8+8 t=R_ADDR command-line-arguments.ConvToM<1>+0
aux for command-line-arguments.ConvToM<0> SDWARFLINES size=42
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 11 14  ................
	0x0010 0a 73 06 37 06 76 06 2d 06 a5 06 2d 06 02 22 ff  .s.7.v.-...-..".
	0x0020 06 4b 06 87 16 02 1e 00 01 01                    .K........
	rel 3+8 t=R_ADDR command-line-arguments.ConvToM<1>+0
aux for command-line-arguments.ConvToM<0> SDWARFFCN size=82
	0x0000 03 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 43 6f 6e 76 54 6f 4d 00  guments.ConvToM.
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 9c 02 00 00 00 17 01 12 78 00 00 17 00 00 00  .........x......
	0x0040 00 00 00 00 00 11 7e 72 30 00 01 17 00 00 00 00  ......~r0.......
	0x0050 00 00                                            ..
	rel 0+0 t=R_USETYPE type:command-line-arguments.I<0>+0
	rel 32+8 t=R_ADDR command-line-arguments.ConvToM<1>+0
	rel 40+8 t=R_ADDR command-line-arguments.ConvToM<1>+152
	rel 61+4 t=R_DWARFSECREF go:info.interface {}<0>+0
	rel 65+4 t=R_DWARFSECREF <0>+0
	rel 76+4 t=R_DWARFSECREF go:info.command-line-arguments.I<0>+0
aux for command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<0> SDWARFLOC size=79
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
	0x0020 06 00 53 93 08 52 93 08 10 00 00 00 00 00 00 00  ..S..R..........
	0x0030 11 00 00 00 00 00 00 00 05 00 93 08 52 93 08 00  ............R...
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ...............
	rel 8+8 t=R_ADDR command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<1>+0
aux for command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<0> SDWARFLINES size=26
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 06 03 0a  ................
	0x0010 14 06 75 06 2d 02 04 00 01 01                    ..u.-.....
	rel 3+8 t=R_ADDR command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<1>+0
aux for command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<0> SDWARFFCN size=45
	0x0000 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 01 9c 15 00 00 00 00 00 00 00 00  ................
	0x0020 11 7e 72 30 00 01 10 00 00 00 00 00 00           .~r0.........
	rel 0+0 t=R_USETYPE type:*[2]uintptr<0>+0
	rel 0+0 t=R_USETYPE type:go.shape.interface { M() }<0>+0
	rel 1+4 t=R_DWARFSECREF go:info.command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]$abstract<0>+0
	rel 5+8 t=R_ADDR command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<1>+0
	rel 13+8 t=R_ADDR command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]<1>+17
	rel 24+4 t=R_DWARFSECREF go:info.command-line-arguments.NopConvertGeneric[go.shape.interface { M() }]$abstract<0>+73
	rel 28+4 t=R_DWARFSECREF <0>+0
	rel 39+4 t=R_DWARFSECREF go:info.go.shape.interface { M() }<0>+0
aux for command-line-arguments.NopConvertGeneric[command-line-arguments.I]<0> SDWARFLOC size=56
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 25 00 00 00 00 00 00 00  ........%.......
	0x0020 06 00 50 93 08 53 93 08 00 00 00 00 00 00 00 00  ..P..S..........
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 8+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1>+0
aux for command-line-arguments.NopConvertGeneric[command-line-arguments.I]<0> SDWARFLINES size=25
	0x0000 00 09 02 00 00 00 00 00 00 00 00 04 02 03 0a 14  ................
	0x0010 06 69 06 73 02 12 00 01 01                       .i.s.....
	rel 3+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1>+0
aux for command-line-arguments.NopConvertGeneric[command-line-arguments.I]<0> SDWARFFCN size=127
	0x0000 04 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 4e 6f 70 43 6f 6e 76 65  guments.NopConve
	0x0020 72 74 47 65 6e 65 72 69 63 5b 63 6f 6d 6d 61 6e  rtGeneric[comman
	0x0030 64 2d 6c 69 6e 65 2d 61 72 67 75 6d 65 6e 74 73  d-line-arguments
	0x0040 2e 49 5d 00 00 00 00 00 00 00 00 00 00 00 00 00  .I].............
	0x0050 00 00 00 00 01 9c 01 29 2e 70 61 72 61 6d 30 00  .......).param0.
	0x0060 00 00 00 00 00 12 78 00 00 10 00 00 00 00 00 00  ......x.........
	0x0070 00 00 11 7e 72 30 00 01 10 00 00 00 00 00 00     ...~r0.........
	rel 0+0 t=R_USETYPE type:command-line-arguments.I<0>+0
	rel 68+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1>+0
	rel 76+8 t=R_ADDR command-line-arguments.NopConvertGeneric[command-line-arguments.I]<1>+37
	rel 96+4 t=R_DWARFSECREF go:info.command-line-arguments.I<0>+0
	rel 106+4 t=R_DWARFSECREF <0>+87
	rel 110+4 t=R_DWARFSECREF <0>+0
	rel 121+4 t=R_DWARFSECREF <0>+87
aux for command-line-arguments.I.M<0> SDWARFLINES size=26
	0x0000 00 09 02 00 00 00 00 00 00 00 00 0a 73 06 91 06  ............s...
	0x0010 73 06 37 06 41 02 32 00 01 01                    s.7.A.2...
	rel 3+8 t=R_ADDR command-line-arguments.I.M<1>+0
aux for command-line-arguments.I.M<0> SDWARFFCN size=60
	0x0000 04 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 49 2e 4d 00 00 00 00 00  guments.I.M.....
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 01 9c 01 11  ................
	0x0030 7e 70 30 00 00 01 00 00 00 00 00 00              ~p0.........
	rel 0+0 t=R_USETYPE type:command-line-arguments.I<0>+0
	rel 28+8 t=R_ADDR command-line-arguments.I.M<1>+0
	rel 36+8 t=R_ADDR command-line-arguments.I.M<1>+92
	rel 54+4 t=R_DWARFSECREF go:info.command-line-arguments.I<0>+0
aux for go.shape.interface { M() }.M<0> SDWARFLINES size=26
	0x0000 00 09 02 00 00 00 00 00 00 00 00 0a 73 06 91 06  ............s...
	0x0010 73 06 37 06 41 02 32 00 01 01                    s.7.A.2...
	rel 3+8 t=R_ADDR go.shape.interface { M() }.M<1>+0
aux for go.shape.interface { M() }.M<0> SDWARFFCN size=62
	0x0000 04 67 6f 2e 73 68 61 70 65 2e 69 6e 74 65 72 66  .go.shape.interf
	0x0010 61 63 65 20 7b 20 4d 28 29 20 7d 2e 4d 00 00 00  ace { M() }.M...
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c  ................
	0x0030 01 11 7e 70 30 00 00 01 00 00 00 00 00 00        ..~p0.........
	rel 0+0 t=R_USETYPE type:go.shape.interface { M() }<0>+0
	rel 30+8 t=R_ADDR go.shape.interface { M() }.M<1>+0
	rel 38+8 t=R_ADDR go.shape.interface { M() }.M<1>+92
	rel 56+4 t=R_DWARFSECREF go:info.go.shape.interface { M() }<0>+0
aux for type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SDWARFLOC size=102
	0x0000 ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00  ................
	0x0020 01 00 50 00 00 00 00 00 00 00 00 00 00 00 00 00  ..P.............
	0x0030 00 00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 21 00 00 00 00  ...........!....
	0x0050 00 00 00 01 00 53 00 00 00 00 00 00 00 00 00 00  .....S..........
	0x0060 00 00 00 00 00 00                                ......
	rel 8+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+0
	rel 59+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+0
aux for type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SDWARFLINES size=26
	0x0000 00 09 02 00 00 00 00 00 00 00 00 06 2d 06 a5 06  ............-...
	0x0010 37 06 55 06 23 02 02 00 01 01                    7.U.#.....
	rel 3+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+0
aux for type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0> SDWARFFCN size=139
	0x0000 03 74 79 70 65 3a 2e 65 71 2e 73 74 72 75 63 74  .type:.eq.struct
	0x0010 20 7b 20 43 61 63 68 65 20 75 6e 73 61 66 65 2e   { Cache unsafe.
	0x0020 50 6f 69 6e 74 65 72 3b 20 49 6e 74 65 72 20 75  Pointer; Inter u
	0x0030 6e 73 61 66 65 2e 50 6f 69 6e 74 65 72 3b 20 43  nsafe.Pointer; C
	0x0040 61 6e 46 61 69 6c 20 62 6f 6f 6c 20 7d 00 00 00  anFail bool }...
	0x0050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 9c  ................
	0x0060 01 00 00 00 01 01 12 70 00 00 01 00 00 00 00 00  .......p........
	0x0070 00 00 00 12 71 00 00 01 00 00 00 00 00 00 00 00  ....q...........
	0x0080 11 72 00 01 01 00 00 00 00 00 00                 .r.........
	rel 0+0 t=R_USETYPE type:bool<0>+0
	rel 78+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+0
	rel 86+8 t=R_ADDR type:.eq.struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<1>+33
	rel 107+4 t=R_DWARFSECREF go:info.*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+0
	rel 111+4 t=R_DWARFSECREF <0>+0
	rel 120+4 t=R_DWARFSECREF go:info.*struct { Cache unsafe.Pointer; Inter unsafe.Pointer; CanFail bool }<0>+0
	rel 124+4 t=R_DWARFSECREF <0>+51
	rel 133+4 t=R_DWARFSECREF go:info.bool<0>+0
aux for command-line-arguments.NopConvertGenericIface<0> SDWARFVAR size=62
	0x0000 0a 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar
	0x0010 67 75 6d 65 6e 74 73 2e 4e 6f 70 43 6f 6e 76 65  guments.NopConve
	0x0020 72 74 47 65 6e 65 72 69 63 49 66 61 63 65 00 09  rtGenericIface..
	0x0030 03 00 00 00 00 00 00 00 00 00 00 00 00 01        ..............
	rel 49+8 t=R_ADDR command-line-arguments.NopConvertGenericIface<0>+0
	rel 57+4 t=R_DWARFSECREF go:info.func(command-line-arguments.I) command-line-arguments.I<0>+0
